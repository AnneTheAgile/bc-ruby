C:\amsrc\rmtry\doc\status.txt
[]add ; 7.55p MS  Win Azure outperforms amazon ec2 on average by 3x; read cloud spectator report. 
http://www.windowsazure.com/en-us/campaigns/azure-vs-aws/

===========================================================
.[]RSPEC
===========================================================
.[]On windows. 140120m.12.12p

C:\amsrc\rmtry>rspec --format documentation

Cart
  #Initialize: Each Cart has an associated Store in order to know about the available products.
    #Initialize Raises error if fail to provide a Store to the constructor.
  Can Add and Check items in the Cart.
    #add Raises error if add a new item without any arguments, ie no Id.
    #Count is 1 when one item is in the cart.
    #Count is 2 when two items are in the cart.
    #Clear Resets a populated cart back to empty.
    #Report Describes a cart with one item as a string.
    #Report Describes a cart with two items as a string.
    #Report Describes an empty cart as having no elements.
    #CartAsMapOfProductsAndQuantities converts the List of Products Ordered into a Map of products and total quantities.
    #TotalPrice, #Report_total both Return the price for all the Products in the cart.
  FUTURE Possible work.
    Can delete an item from the cart. (PENDING: Not yet implemented)
    Can find whether a product is in the cart. (PENDING: Not yet implemented)

Money
  #Report_dollars prepends the $ to the current @dollars and includes two decimal places.
  #Report_dollars with an argument of dollars prepends the $ to the value and includes two decimal places.
  Can add monies, tracking both pennies and dollars.
    #Add 1 USD to 0 => 100 pennies = 1.00 dollars.
    #Add 0.01 USD, ie one penny, to 0 => 1 penny = 0.01 dollars.
    #Add 1.119 USD to 0 (rounds up) => 112 pennies = 1.12 dollars.
  Can validate and convert between dollars and pennies.
    #Pennies_to_dollars uses the class constant to convert.
    #Add and all Validators Raise error if provide a string instead of USD or pennies.
    #Add and all Validators Raise error if provide a negative number for USD or pennies.
    #Add and all Validators Raise error if provide infinity for USD or pennies.
    #DollarsToPennies Rounds up.
  FUTURE possible work.
    Refactor: Use Class-based, not instance-based, methods for the Math functions. (PENDING: Not yet implemented)
    #Add .1 USD, ie no leading zero, Raises Syntax error. (PENDING: Cannot directly test due to ruby considers 'a=.1' an error.)

Store
  #Add_Product
    Raises error if add a new item without any arguments, ie no Id.
    Raises error if add a new item without both Id and Price.
    Raises error if the given ID is not a string.
    Raises error if duplicate product ID is entered.
    Allows the given Price to be convertible to a float, eg 1 not 1.0.
    Raises error if the given Discount quantity is not an integer.
    Raises error if the given Batch Price is not convertible to a float.
    Raises error if Discount quantity but not price is entered.
    #Add_product: Converts a String input for BatchQuantity (numberForBatchDiscount) to integer (Fix ISSUE#01 In CLI, Exception upon specify a non-zero numberForBatchDiscount - due to Ruby Gets produces Strings, and Ruby argument parser converts only perceived floats, not integers.
  Can Modify its Content.
    #Add_product_map enables adding a new item as a preformed hashmap.
    #Clear Resets the Store's population of products back to empty.
  Can Report its Content and Metadata.
    #ProductMetadata gives the list of attributes found in the maximal constructor.
    #Find_Product Returns true upon searching a product that is in the store.
    #Find_Product Returns false upon searching a product that is not in the store.
    #Count is 1 for one element.
    #Count is 2 for two elements.
    #Report Describes the Store's contents as a string.
    #Product_list_showing_prices_in_dollars Describes the Store's contents as a string.
    #Product_list_showing_prices_in_dollars Describes an empty Store as having no elements.
  Knows about Dollars, Pennies, and Prices of its Products.
    #Price_in_dollars_for_quantity: Raises error if price-check an empty store.
    #Price_in_dollars_for_quantity: Raises error if price-check an item not in the store.
    #Price_in_dollars_for_quantity: Returns the non-discounted price in pennies for quantity of one.
    #Price_in_dollars_for_quantity: Returns the non-discounted price in pennies when no discount volume quantity exists.
    #Price_in_dollars_for_quantity: Returns the discounted total price in pennies for purchase size exactly equal to the discount volume quantity.
    #Price_in_dollars_for_quantity: Returns the minimally discounted total price in pennies for purchase size larger than the discount volume quantity.
  FUTURE possible work.
    Product entry refuses BatchPrice > Standard Price. (PENDING: Not yet implemented)
    Refactor Store Validation to use Type Casting instead of checking ValidAsXType. (PENDING: Not yet implemented)
    Refactor to avoid Raising Exceptions during data input validation. (PENDING: Not yet implemented)
    Refactor Products Map to use symbols instead of strings as hash keys. (PENDING: cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby)
    Refactor Product into a separate class. (PENDING: Not yet implemented)
    Can initialize with a list of products. (PENDING: Not yet implemented)

Terminal
  API Access allows simple manipulations.
Hello from your POS Terminal Controller!
    #SetPricing: Enables Admin to enter a set of products and their prices.
Hello from your POS Terminal Controller!
    #SetPricing: Sample Test: Can enter A=2/1, 4/7; B=12; C=1.25/1, 6/6; D=0.15.
Hello from your POS Terminal Controller!
    #Scan will add items to the cart.
Hello from your POS Terminal Controller!
    #Total provides the bill, without itemization.
Hello from your POS Terminal Controller!
    #Total: Sample Test#1: Cart of ABCDABAA should be $32.40.
Hello from your POS Terminal Controller!
    #Total: Sample Test#2: Cart of CCCCCCC should be $7.25.
Hello from your POS Terminal Controller!
    #Total: Sample Test#3: Cart of ABCD should be $15.40.
Hello from your POS Terminal Controller!
    #Total: Sample Test#4: Cart of A should be $2.00.
  Admin can Initialize the Store with a CLI.
    #Initialize Raises error if fail to provide a Store to the constructor.
    #Initialize Requires a Store.
  Admin can Add Products to the store through the CLI - Read/Write of System IO.
Hello from your POS Terminal Controller!
    #Prompt_confirm: Causes the user to verify another product should be entered.
Hello from your POS Terminal Controller!
    #Prompt_for_product: Allows entry of a single product's pricelist ( product-id, price, qualifying quantity, and discounted price) as verified by the prompt and the store's pricelist.
Hello from your POS Terminal Controller!
    #Prompt_loop__for_products Allows entry of two Products' data.
  User can Add to a Cart and Get Totals with through the CLI with System IO.
Hello from your POS Terminal Controller!
    #Prompt_for_cart_item: Accepts entry of a single Product ID.
Hello from your POS Terminal Controller!
    #Prompt_loop_for_cart Allows entry of any desired products to purchase.
  FUTURE possible work.
    Add Help option. (PENDING: Not yet implemented)
    Refactor Rspec Test fixtures are not DRY. (PENDING: Not yet implemented)
    Refactor, Consolidate to single prompt_loop with yield. (PENDING: Not yet implemented)
    During entry of product's price, display a convenient message that Zero (0) is the Default value for quantity and price. (PENDING: Not yet implemented)
    Allows less-strict entry of products, eg defaults. (PENDING: Not yet implemented)
    Rector, KATA: Redesign to be responsibility-based, not object-based. (PENDING: Not yet implemented)
    #Initialize Does Not Say Hello to the (Admin) user upon instantiation if running Non-Interactively. (PENDING: Stdout fix so that one or two tests will pass/fail whether automated (this passes) or not (it fails).)
    Enables tests to be silent so $sysout from prompting does not clutter the Rspec output. (PENDING: Not yet implemented)
    Allows Unix-style redirect of Standard IO, stdin/stdout. (PENDING: Not yet implemented)
    #prompt_for_product: Specifically includes four prompts. (Add test to prove this.) (PENDING: Not yet implemented)
    Refactor; Use Rspec Let to construct a complex, nested object instead of Method calls. (PENDING: Grok Rspec's Let vs Subject vs Method call prep.)

Pending:
  Cart FUTURE Possible work. Can delete an item from the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:108
  Cart FUTURE Possible work. Can find whether a product is in the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:109
  Money FUTURE possible work. Refactor: Use Class-based, not instance-based, methods for the Math functions.
    # Not yet implemented
    # ./spec/lib/money_spec.rb:87
  Money FUTURE possible work. #Add .1 USD, ie no leading zero, Raises Syntax error.
    # Cannot directly test due to ruby considers 'a=.1' an error.
    # ./spec/lib/money_spec.rb:89
  Store FUTURE possible work. Product entry refuses BatchPrice > Standard Price.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:166
  Store FUTURE possible work. Refactor Store Validation to use Type Casting instead of checking ValidAsXType.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:167
  Store FUTURE possible work. Refactor to avoid Raising Exceptions during data input validation.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:168
  Store FUTURE possible work. Refactor Products Map to use symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:169
  Store FUTURE possible work. Refactor Product into a separate class.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:172
  Store FUTURE possible work. Can initialize with a list of products.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:173
  Terminal FUTURE possible work. Add Help option.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:168
  Terminal FUTURE possible work. Refactor Rspec Test fixtures are not DRY.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:170
  Terminal FUTURE possible work. Refactor, Consolidate to single prompt_loop with yield.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:172
  Terminal FUTURE possible work. During entry of product's price, display a convenient message that Zero (0) is the Default value for quantity and price.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:186
  Terminal FUTURE possible work. Allows less-strict entry of products, eg defaults.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:188
  Terminal FUTURE possible work. Rector, KATA: Redesign to be responsibility-based, not object-based.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:191
  Terminal FUTURE possible work. #Initialize Does Not Say Hello to the (Admin) user upon instantiation if running Non-Interactively.
    # Stdout fix so that one or two tests will pass/fail whether automated (this passes) or not (it fails).
    # ./spec/lib/terminal_spec.rb:194
  Terminal FUTURE possible work. Enables tests to be silent so $sysout from prompting does not clutter the Rspec output.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:204
  Terminal FUTURE possible work. Allows Unix-style redirect of Standard IO, stdin/stdout.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:206
  Terminal FUTURE possible work. #prompt_for_product: Specifically includes four prompts. (Add test to prove this.)
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:211
  Terminal FUTURE possible work. Refactor; Use Rspec Let to construct a complex, nested object instead of Method calls.
    # Grok Rspec's Let vs Subject vs Method call prep.
    # ./spec/lib/terminal_spec.rb:223

Finished in 0.68753 seconds
81 examples, 0 failures, 21 pending

C:\amsrc\rmtry>
===========================================================
.[]CLI DEMO Example
===========================================================
.[]

C:\amsrc\rmtry>ruby .\lib\terminal.rb
Hello from your POS Terminal Controller!

Welcome to the Admin Process of entering the Store's Products and their Prices.
 Please confirm to continue with 'y' for yes.
y
Please enter this product's details.
Please enter the id.
a
Please enter the price.
10
Please enter the numberForBatchDiscount.
2
Please enter the batchPrice.
1
Please confirm to continue with 'y' for yes.
n
Thank you for entering the Store's Price list. It is;
[{:id=>"a", :price=>10.0, :numberForBatchDiscount=>2, :batchPrice=>1.0}]

Welcome to the Customer Process of entering a list of Products to put in the Cart for purchase.
  1.In between each entry, you will be given a chance to stop.
  2.For NumerForBatchDiscount and BatchPrice, zero may be used to indicate no discounts are available.
Please confirm to continue with 'y' for yes.
y
Please enter a Product ID to add to your shopping cart.
a
Please confirm to continue with 'y' for yes.
y
Please enter a Product ID to add to your shopping cart.
a
Please confirm to continue with 'y' for yes.
y
Please enter a Product ID to add to your shopping cart.
a
Please confirm to continue with 'y' for yes.
n
Thank you for entering your Cart list. It is;
["a", "a", "a"]

Thank you for your purchases! Your total is: $11.00

C:\amsrc\rmtry>
C:\amsrc\rmtry>
===========================================================
.[]
===========================================================
.[]
==========================================================
1.[] ; X.ruby - How can I determine if my process is being run interactively? - Stack Overflow
http://stackoverflow.com/questions/3384982/how-can-i-determine-if-my-process-is-being-run-interactively
ruby - How can I determine if my process is being run interactively? - Stack Overflow
===========================================================
.[]
===========================================================
.[]
===========================================================
.[]WORKS?!  140119x 9.40p

C:\amsrc\rmtry>rspec -f d

Cart
  #Initialize: Each Cart has an associated Store in order to know about the available products.
    #Initialize Raises error if fail to provide a Store to the constructor.
  Can Add and Check items in the Cart.
    #add Raises error if add a new item without any arguments, ie no Id.
    #Count is 1 when one item is in the cart.
    #Count is 2 when two items are in the cart.
    #Clear Resets a populated cart back to empty.
    #Report Describes a cart with one item as a string.
    #Report Describes a cart with two items as a string.
    #Report Describes an empty cart as having no elements.
    #CartAsMapOfProductsAndQuantities converts the List of Products Ordered into a Map of products and total quantities.
["a", 2.0]["b", 5.0]["c", 160.0]["a", 2.0]["b", 5.0]["c", 160.0]    #TotalPrice, #Report_total both Return the price for all the Products in the cart.
  FUTURE Possible work.
    Can delete an item from the cart. (PENDING: Not yet implemented)
    Can find whether a product is in the cart. (PENDING: Not yet implemented)

Money
  #Report_dollars prepends the $ to the current @dollars and includes two decimal places.
  #Report_dollars with an argument of dollars prepends the $ to the value and includes two decimal places.
  Can add monies, tracking both pennies and dollars.
    #Add 1 USD to 0 => 100 pennies = 1.00 dollars.
    #Add 0.01 USD, ie one penny, to 0 => 1 penny = 0.01 dollars.
    #Add 1.119 USD to 0 (rounds up) => 112 pennies = 1.12 dollars.
  Can validate and convert between dollars and pennies.
    #Pennies_to_dollars uses the class constant to convert.
    #Add and all Validators Raise error if provide a string instead of USD or pennies.
    #Add and all Validators Raise error if provide a negative number for USD or pennies.
    #Add and all Validators Raise error if provide infinity for USD or pennies.
    #DollarsToPennies Rounds up.
  FUTURE possible work.
    Refactor: Use Class-based, not instance-based, methods for the Math functions. (PENDING: Not yet implemented)
    #Add .1 USD, ie no leading zero, Raises Syntax error. (PENDING: Cannot directly test due to ruby considers 'a=.1' an error.)

Store
  #Add_Product
    Raises error if add a new item without any arguments, ie no Id.
    Raises error if add a new item without both Id and Price.
    Raises error if the given ID is not a string.
    Raises error if duplicate product ID is entered.
    Allows the given Price to be convertible to a float, eg 1 not 1.0.
    Raises error if the given Discount quantity is not an integer.
    Raises error if the given Batch Price is not convertible to a float.
    Raises error if Discount quantity but not price is entered.
  Can Modify its Content.
-Got map={:id=>"a", :price=>3, :numberForBatchDiscount=>2, :batchPrice=>2}-map's vals=a 3    #Add_product_map enables adding a new item as a preformed hashmap.
    #Clear Resets the Store's population of products back to empty.
  Can Report its Content and Metadata.
    #ProductMetadata gives the list of attributes found in the maximal constructor.
    #Find_Product Returns true upon searching a product that is in the store.
    #Find_Product Returns false upon searching a product that is not in the store.
    #Count is 1 for one element.
    #Count is 2 for two elements.
    #Report Describes the Store's contents as a string.
    #Product_list_showing_prices_in_dollars Describes the Store's contents as a string.
    #Product_list_showing_prices_in_dollars Describes an empty Store as having no elements.
  Knows about Dollars, Pennies, and Prices of its Products.
    #Price_in_dollars_for_quantity: Raises error if price-check an empty store.
    #Price_in_dollars_for_quantity: Raises error if price-check an item not in the store.
    #Price_in_dollars_for_quantity: Returns the non-discounted price in pennies for quantity of one.
    #Price_in_dollars_for_quantity: Returns the non-discounted price in pennies when no discount volume quantity exists.
    #Price_in_dollars_for_quantity: Returns the discounted total price in pennies for purchase size exactly equal to the discount volume quantity.
    #Price_in_dollars_for_quantity: Returns the minimally discounted total price in pennies for purchase size larger than the discount volume quantity.
  FUTURE possible work.
    Refactor Store Validation to use Type Casting instead of checking ValidAsXType. (PENDING: Not yet implemented)
    Refactor to avoid Raising Exceptions during data input validation. (PENDING: Not yet implemented)
    Refactor Products Map to use symbols instead of strings as hash keys. (PENDING: cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby)
    Refactor Product into a separate class. (PENDING: Not yet implemented)
    Can initialize with a list of products. (PENDING: Not yet implemented)

Terminal
  API Access allows simple manipulations.
Hello from your POS Terminal Controller!
["--setPricing recd;", "[[\"a\", 1], [\"b\", 20, 2, 10], [\"c\", 3, 3, 2]]"]["--setPricing ", "[\"a\", 1]", "and giving=", "a, 1"]["--iarg 2 parts;", "a", 1]["--setPricing ", "[\"b\", 20, 2, 10]", "and giving=", "b, 20, 2, 10"]["--iarg 2 parts;", "b", 20]["--setPricing ", "[\"c\", 3, 3, 2]", "and gi
ving=", "c, 3, 3, 2"]["--iarg 2 parts;", "c", 3]    #SetPricing: Enables Admin to enter a set of products and their prices.
Hello from your POS Terminal Controller!
["--setPricing recd;", "[[\"a\", 1], [\"b\", 20, 2, 10], [\"c\", 3, 3, 2]]"]["--setPricing ", "[\"a\", 1]", "and giving=", "a, 1"]["--iarg 2 parts;", "a", 1]["--setPricing ", "[\"b\", 20, 2, 10]", "and giving=", "b, 20, 2, 10"]["--iarg 2 parts;", "b", 20]["--setPricing ", "[\"c\", 3, 3, 2]", "and gi
ving=", "c, 3, 3, 2"]["--iarg 2 parts;", "c", 3]    #Scan will add items to the cart.
Hello from your POS Terminal Controller!
["--setPricing recd;", "[[\"a\", 1], [\"b\", 20, 2, 10], [\"c\", 3, 3, 2]]"]["--setPricing ", "[\"a\", 1]", "and giving=", "a, 1"]["--iarg 2 parts;", "a", 1]["--setPricing ", "[\"b\", 20, 2, 10]", "and giving=", "b, 20, 2, 10"]["--iarg 2 parts;", "b", 20]["--setPricing ", "[\"c\", 3, 3, 2]", "and gi
ving=", "c, 3, 3, 2"]["--iarg 2 parts;", "c", 3]["a", 1.0]["c", 3.0]    #Total provides the bill, without itemization.
  Admin can Initialize the Store with a CLI.
    #Initialize Raises error if fail to provide a Store to the constructor.
    #Initialize Requires a Store.
    #Initialize Says Hello to the (Admin) user upon instantiation.
  Admin can Add Products to the store through the CLI - Read/Write of System IO.
Hello from your POS Terminal Controller!
    #Prompt_confirm: Causes the user to verify another product should be entered.
Hello from your POS Terminal Controller!
    #Prompt_for_product: Allows entry of a single product's pricelist ( product-id, price, qualifying quantity, and discounted price) as verified by the prompt and the store's pricelist.
Hello from your POS Terminal Controller!
    #Prompt_loop__for_products Allows entry of two Products' data.
  User can Add to a Cart and Get Totals with through the CLI with System IO.
Hello from your POS Terminal Controller!
    #Prompt_for_cart_item: Accepts entry of a single Product ID.
Hello from your POS Terminal Controller!
    #Prompt_loop_for_cart Allows entry of any desired products to purchase.
  TBA - requirements not completed yet.
    Refactor, Consolidate to single prompt_loop with yield. (PENDING: Not yet implemented)
  FUTURE possible work.
    During entry of product's price, display a convenient message that Zero (0) is the Default value for quantity and price. (PENDING: Not yet implemented)
    Allows less-strict entry of products, eg defaults. (PENDING: Not yet implemented)
    Rector, KATA: Redesign to be responsibility-based, not object-based. (PENDING: Not yet implemented)
    Enables tests to be silent so $sysout from prompting does not clutter the Rspec output. (PENDING: Not yet implemented)
    Allows Unix-style redirect of Standard IO, stdin/stdout. (PENDING: Not yet implemented)
    #prompt_for_product: Specifically includes four prompts. (Add test to prove this.) (PENDING: Not yet implemented)
    Refactor; Use Rspec Let to construct a complex, nested object instead of Method calls. (PENDING: Grok Rspec's Let vs Subject vs Method call prep.)

Pending:
  Cart FUTURE Possible work. Can delete an item from the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:108
  Cart FUTURE Possible work. Can find whether a product is in the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:109
  Money FUTURE possible work. Refactor: Use Class-based, not instance-based, methods for the Math functions.
    # Not yet implemented
    # ./spec/lib/money_spec.rb:87
  Money FUTURE possible work. #Add .1 USD, ie no leading zero, Raises Syntax error.
    # Cannot directly test due to ruby considers 'a=.1' an error.
    # ./spec/lib/money_spec.rb:89
  Store FUTURE possible work. Refactor Store Validation to use Type Casting instead of checking ValidAsXType.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:160
  Store FUTURE possible work. Refactor to avoid Raising Exceptions during data input validation.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:161
  Store FUTURE possible work. Refactor Products Map to use symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:162
  Store FUTURE possible work. Refactor Product into a separate class.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:165
  Store FUTURE possible work. Can initialize with a list of products.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:166
  Terminal TBA - requirements not completed yet. Refactor, Consolidate to single prompt_loop with yield.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:118
  Terminal FUTURE possible work. During entry of product's price, display a convenient message that Zero (0) is the Default value for quantity and price.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:136
  Terminal FUTURE possible work. Allows less-strict entry of products, eg defaults.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:138
  Terminal FUTURE possible work. Rector, KATA: Redesign to be responsibility-based, not object-based.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:141
  Terminal FUTURE possible work. Enables tests to be silent so $sysout from prompting does not clutter the Rspec output.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:144
  Terminal FUTURE possible work. Allows Unix-style redirect of Standard IO, stdin/stdout.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:146
  Terminal FUTURE possible work. #prompt_for_product: Specifically includes four prompts. (Add test to prove this.)
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:151
  Terminal FUTURE possible work. Refactor; Use Rspec Let to construct a complex, nested object instead of Method calls.
    # Grok Rspec's Let vs Subject vs Method call prep.
    # ./spec/lib/terminal_spec.rb:163

Finished in 0.57815 seconds
72 examples, 0 failures, 17 pending

C:\amsrc\rmtry>git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       deleted:    .idea/runConfigurations/Run_spec__cart_spec___rmtry.xml
#       modified:   lib/terminal.rb
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   .idea/rmtry.iml
#       modified:   .idea/workspace.xml
#       modified:   lib/cart.rb
#       modified:   lib/money.rb
#       modified:   lib/store.rb
#       modified:   lib/terminal.rb
#       modified:   spec/lib/cart_spec.rb
#       modified:   spec/lib/get_in_out.rb
#       modified:   spec/lib/money_spec.rb
#       modified:   spec/lib/store_spec.rb
#       modified:   spec/lib/terminal_spec.rb
#       modified:   specLib/zRspecMock_spec.rb
#       modified:   specLib/zRspec_spec.rb
#       modified:   specLib/zRuby_spec.rb
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       doc/Haskell.Chap5and6.140119x.txt
#       doc/zTRY.sort.txt

C:\amsrc\rmtry>git add -A

C:\amsrc\rmtry>git commit -m "GRN. WORKS?! Terminal now has both API and CLI a
ccess to it."
[master 195f704] GRN. WORKS?! Terminal now has both API and CLI access to it.
 17 files changed, 764 insertions(+), 229 deletions(-)
 delete mode 100644 .idea/runConfigurations/Run_spec__cart_spec___rmtry.xml
 create mode 100644 doc/Haskell.Chap5and6.140119x.txt
 create mode 100644 doc/zTRY.sort.txt

C:\amsrc\rmtry>
===========================================================
.[]
===========================================================
.[]
===========================================================
.[]Refactored so Green and nice. 140119x 9.40a
C:\amsrc\rmtry>rspec
........**.........**......................*****...Hello from your POS Terminal Controller!
.Hello from your POS Terminal Controller!
.*********

Pending:
  Cart FUTURE Possible work. Can delete an item from the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:75
  Cart FUTURE Possible work. Can find whether a product is in the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:76
  Money FUTURE possible work. Refactor: Use Class-based, not instance-based, methods for the Math functions.
    # Not yet implemented
    # ./spec/lib/money_spec.rb:83
  Money FUTURE possible work. #Add .1 USD, ie no leading zero, Raises Syntax error.
    # Cannot directly test due to ruby considers 'a=.1' an error.
    # ./spec/lib/money_spec.rb:85
  Store FUTURE possible work. Refactor Store Validation to use Type Casting instead of checking ValidAsXType.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:144
  Store FUTURE possible work. Refactor to avoid Raising Exceptions during data input validation.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:145
  Store FUTURE possible work. Refactor Products Map to use symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:146
  Store FUTURE possible work. Refactor Product into a separate class.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:149
  Store FUTURE possible work. Can initialize with a list of products.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:150
  Terminal TBA - requirements not completed yet. Allows entry of product-id, price, defaulting for quantity and price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:73
  Terminal TBA - requirements not completed yet. Allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:75
  Terminal TBA - requirements not completed yet. Verifies any item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:77
  Terminal FUTURE possible work. Allows less-strict entry of products, eg defaults.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:86
  Terminal FUTURE possible work. Rector, KATA: Redesign to be responsibility-based, not object-based.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:89
  Terminal FUTURE possible work. Enables tests to be silent so $sysout from prompting does not clutter the Rspec output.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:92
  Terminal FUTURE possible work. Allows Unix-style redirect of Standard IO, stdin/stdout.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:94
  Terminal FUTURE possible work. #prompt_for_product: Specifically includes four prompts. (Add test to prove this.)
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:99
  Terminal FUTURE possible work. Refactor; Use Rspec Let to construct a complex, nested object.
    # Grok Rspec's Let vs Subject vs Method call prep.
    # ./spec/lib/terminal_spec.rb:111

Finished in 0.12501 seconds
62 examples, 0 failures, 18 pending

C:\amsrc\rmtry>
C:\amsrc\rmtry>
C:\amsrc\rmtry>git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       new file:   .idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml
#       renamed:    lib/pennies.rb -> lib/money.rb
#       new file:   spec/lib/money_spec.rb
#       deleted:    spec/lib/pennies_spec.rb
#
# Changes not staged for commit:
#   (use "git add/rm <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   .idea/rmtry.iml
#       deleted:    .idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml
#       modified:   .idea/workspace.xml
#       modified:   doc/status.txt
#       modified:   lib/money.rb
#       modified:   lib/store.rb
#       modified:   spec/lib/money_spec.rb
#       modified:   spec/lib/store_spec.rb
#       modified:   spec/lib/terminal_spec.rb
#       modified:   zFutureMaybe/db_spec.rb
#

C:\amsrc\rmtry>
===========================================================
.[]140118s 9p
==========================================================
1.[]TODO cool shortcut; true if Float(self) rescue false ; X.Test if string is a number in Ruby on Rails - Stack Overflow
http://stackoverflow.com/questions/5661466/test-if-string-is-a-number-in-ruby-on-rails
Test if string is a number in Ruby on Rails - Stack Overflow
 47 down vote accepted
If you want to be able to do

mystring.is_number?

you can declare your method on the String class:
class String
  def is_number?
    true if Float(self) rescue false
  end
end

Otherwise you need to use

is_number?(mystring)

as others have pointed out.

===========================================================
.[]TODO RSPEC idk subject/lets getting nils on let

describe 'Terminal' do
  #let(:theStore) { Store::Store.new }
  #let(:gui) {  }

  describe 'Requires Initialization and Setup.' do

    subject do
      Terminal::TerminalPos.new(aStore)
    end

    it '#Initialize Raises error if fail to provide a Store to the constructor.' do
      expect{Terminal::TerminalPos.new}.to raise_error ArgumentError
    end

    it '#Initialize Requires a Store.' do
      expect{Terminal::TerminalPos.new($stdin)}.to  raise_error(RuntimeError, /Argument is not a Store./)
      expect{Terminal::TerminalPos.new(Store::Store.new)}.not_to  raise_error
      expect(Terminal::TerminalPos.new(@gui)).not_to  raise_error #NilClass
    end

    it '#Initialize Says Hello to the (Admin) user upon instantiation.' do
      expect { gui }.to match_stdout( "Hello from your POS") #" Terminal Controller!")
    end

  end
==========================================================
1.[] ; X.Dry up Your Rspec Files with subject & let Blocks - Ben Scheirman
http://benscheirman.com/2011/05/dry-up-your-rspec-files-with-subject-let-blocks/
Dry up Your Rspec Files with subject & let Blocks - Ben Scheirman

#improved example
require 'spec_helper'
 
describe Card do
subject do
Card.new(card_type)
end
describe "#value" do
context "Two of Hearts" do
let(:card_type) { "2H" }
its(:value) { should == 2 }
end
describe "Face Cards" do
context "King of Clubs" do
let(:card_type) { "KC" }
its(:value) { should == 13 }
end
==========================================================
1.[]uses pennies like i am doing ; X.RubyMoney/money
https://github.com/RubyMoney/money
RubyMoney/money
 RubyMoney - Money

Gem Version Build Status Code Climate Coverage Status Dependency Status License

:warning: Please read the migration notes before upgrading to a new major version.

If you miss String parsing, check out the new monetize gem. Introduction

A Ruby Library for dealing with money and currency conversion.
Features

    Provides a Money class which encapsulates all information about an certain amount of money, such as its value and its currency.
    Provides a Money::Currency class which encapsulates all information about a monetary unit.
    Represents monetary values as integers, in cents. This avoids floating point rounding errors.
    Represents currency as Money::Currency instances providing an high level of flexibility.
    Provides APIs for exchanging money from one currency to another.

Resources

    Website
    API Documentation
    Git Repository

Notes

    Your app must use UTF-8 to function with this library. There are a number of non-ASCII currency attributes.
    This app requires JSON. If you're using JRuby < 1.7.0 you'll need to add gem "json" to your Gemfile or similar.

==========================================================
1.[]substring, just say include? !!! ; X.How to check whether a string contains a substring in Ruby? - Stack Overflow
http://stackoverflow.com/questions/8258517/how-to-check-whether-a-string-contains-a-substring-in-ruby
How to check whether a string contains a substring in Ruby? - Stack Overflow
81 down vote accepted
	

You can use the include? method:

my_string = "abcdefg"
if my_string.include? "cde"
   puts "String includes 'cde'"
end


==========================================================
1.[]very convoluted answers ; X.ruby on rails - Determine if a string is a valid float value - Stack Overflow
http://stackoverflow.com/questions/1034418/determine-if-a-string-is-a-valid-float-value
ruby on rails - Determine if a string is a valid float value - Stack Overflow

 0 down vote
	

I saw the unresolved discussion on cast+exceptions vs regex and I thought I would try to benchmark everything and produce an objective answer:

Here is the source for the best case and worst of each method attempted here:

require "benchmark"
n = 500000

def is_float?(fl)
  !!Float(fl) rescue false
end

def is_float_reg(fl)
  fl =~ /(^(\d+)(\.)?(\d+)?)|(^(\d+)?(\.)(\d+))/
end

class String
  def to_float
    Float self rescue (0.0 / 0.0)
  end
end


Benchmark.bm(7) do |x|
  x.report("Using cast best case") {
    n.times do |i|
      temp_fl = "#{i + 0.5}"
      is_float?(temp_fl)
    end
  }
  x.report("Using cast worst case") {
    n.times do |i|
      temp_fl = "asdf#{i + 0.5}"
      is_float?(temp_fl)
    end
  }
  x.report("Using cast2 best case") {
    n.times do |i|
      "#{i + 0.5}".to_float
    end
  }
  x.report("Using cast2 worst case") {
    n.times do |i|
      "asdf#{i + 0.5}".to_float
    end
  }
  x.report("Using regexp short") {
    n.times do |i|
      temp_fl = "#{i + 0.5}"
      is_float_reg(temp_fl)
    end
  }
  x.report("Using regexp long") {
    n.times do |i|
      temp_fl = "12340918234981234#{i + 0.5}"
      is_float_reg(temp_fl)
    end
  }
    x.report("Using regexp short fail") {
    n.times do |i|
      temp_fl = "asdf#{i + 0.5}"
      is_float_reg(temp_fl)
    end
  }
  x.report("Using regexp long fail") {
    n.times do |i|
      temp_fl = "12340918234981234#{i + 0.5}asdf"
      is_float_reg(temp_fl)
    end
  }

end

With the following results with mri193:

                  user     system      total        real
    Using cast best case  0.608000   0.000000   0.608000 (  0.615000)
    Using cast worst case  5.647000   0.094000   5.741000 (  5.745000)
    Using cast2 best case  0.593000   0.000000   0.593000 (  0.586000)
    Using cast2 worst case  5.788000   0.047000   5.835000 (  5.839000)
    Using regexp short  0.951000   0.000000   0.951000 (  0.952000)
    Using regexp long  1.217000   0.000000   1.217000 (  1.214000)
    Using regexp short fail  1.201000   0.000000   1.201000 (  1.202000)
    Using regexp long fail  1.295000   0.000000   1.295000 (  1.284000)

Since we are dealing with only Linear time algorithms I think we use empirical measurements to make generalizations. It is plain to see that regex is more consistent and will only fluctuate a bit based on the length of the string passed. The cast is clearly faster when there are no failure, and much slower when there are failures.

If we compare the success times we can see that the cast best case is about .3 seconds faster than regex best case. If we divide this by the amount of time in the case worst case we can estimate how many runs it would take to break even with exceptions slowing the cast down to match regex speeds. About 6 seconds dived by .3 gives us about 20. So if performance matters and you expect less than 1 in 20 of your test to fail then used cast+exceptions.

JRuby 1.7.4 has completely different results:

                  user     system      total        real
    Using cast best case  2.575000   0.000000   2.575000 (  2.575000)
    Using cast worst case 53.260000   0.000000  53.260000 ( 53.260000)
    Using cast2 best case  2.375000   0.000000   2.375000 (  2.375000)
    Using cast2 worst case 53.822000   0.000000  53.822000 ( 53.822000)
    Using regexp short  2.637000   0.000000   2.637000 (  2.637000)
    Using regexp long  3.395000   0.000000   3.395000 (  3.396000)
    Using regexp short fail  3.072000   0.000000   3.072000 (  3.073000)
    Using regexp long fail  3.375000   0.000000   3.375000 (  3.374000)

Cast is only marginally faster in the best case (about 10%). Presuming this difference is appropriate for making generalizations(I do not think it is), then the break even point is somewhere between 200 and 250 runs with only 1 causing an exception.

So exceptions should only be used when truly exceptional things happens, this is decision for you and your codebase. When they aren't used code they are in can be simpler and faster.

If performance doesn't matter, you should probably just following whatever conventions you team or code base already has and ignore this whole answers.
share|improve this answer
	
answered Jul 24 '13 at 15:20
Sqeaky
7831022
	add comment
==========================================================
1.[] ; X.attribute of subject - Subject - RSpec Core - RSpec - Relish
https://www.relishapp.com/rspec/rspec-core/v/2-0/docs/subject/attribute-of-subject
attribute of subject - Subject - RSpec Core - RSpec - Relish

attribute of subject

Scenarios

    simple attribute

        Given
            a file named "example_spec.rb" with:

            describe Array do
              its(:size) { should == 0 }
            end

        When
            I run "rspec example_spec.rb --format documentation" 
        Then
            the output should contain:

            Array
              size
                should == 0

    nested attribute

        Given
            a file named "example_spec.rb" with:

            class Person
              attr_reader :phone_numbers
              def initialize
                @phone_numbers = []
              end
            end

            describe Person do
              subject do
                person = Person.new
                person.phone_numbers << "555-1212"
                person
              end

              its("phone_numbers.first") { should == "555-1212" }
            end

        When
            I run "rspec example_spec.rb --format documentation" 
        Then
            the output should contain:

            Person
              phone_numbers.first
                should == "555-1212"


===========================================================
.[]
===========================================================
.[]140118S 11a
===========================================================
.[]GREAT BUG! validating pennies/int vs dollars/float is coming up with test failure 1.35p.
3p back. will make Dollars.
===========================================================
.[]Win-tip; Cygwin's unix emulation cannot avoid the need for explicit '.bat' usage, eg rspec.bat, whereas windows/terminal knows about bat and runs it by default thus does not need. 
===========================================================
.[]11.50a after rearrange doc of specs; 

$ rspec.bat ./spec/lib/*spec.rb --format documentation

Cart
  Context: Each Cart's associated Store knows about the available products.
    #add Raises error if add a new item without any arguments, ie no Id.
    #Count is 1 when one item is in the cart.
    #Count is 2 when two items are in the cart.
    #Clear Resets a populated cart back to empty.
    #Report Describes a cart with one item as a string.
    #Report Describes a cart with two items as a string.
    #Report Describes an empty cart as having no elements.
  FUTURE Possible work.
    Can delete an item from the cart. (PENDING: Not yet implemented)
    Can find whether a product is in the cart. (PENDING: Not yet implemented)

Store
  #Add_Product
    Raises error if duplicate product is entered.
    Raises error if discount quantity but not price is entered.
    Raises error if add a new item without any arguments, ie no Id.
    Raises error if add a new item without both Id and Price.
  Can Report its Content and Metadata.
    #ProductMetadata gives the list of attributes found in the maximal constructor.
    #Find_Product Returns true upon searching a product that is in the store.
    #Find_Product Returns false upon searching a product that is not in the store.
    #Count is 1 for one element.
    #Count is 2 for two elements.
    #Clear Resets the Store's population of products back to empty.
    #Report Describes the Store's contents as a string.
    #Report Describes an empty Store as having no elements.
  Knows about Dollars, Pennies, and Prices of its Products.
    #ConvertDollarsToPennies Rounds up.
    #Price_in_pennies: Raises error if price-check an empty store.
    #Price_in_pennies: Raises error if price-check an item not in the store.
    #Price_in_pennies: Returns the non-discounted price in pennies for quantity of one.
    #Price_in_pennies: Returns the non-discounted price in pennies when no discount volume quantity exists.
    #Price_in_pennies: Returns the discounted total price in pennies for purchase size exactly equal to the discount volume quantity.
    #Price_in_pennies: Returns the minimally discounted total price in pennies for purchase size larger than the discount volume quantity.
  FUTURE Possible work.
    Refactor Products Map to use symbols instead of strings as hash keys. (PENDING: cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby)

Terminal/Shopping/
  Can Start and Read/Write from System IO.
    Says Hello to the (Admin) user upon instantiation.
    Does Not accept a redefined $stdin nor $stdout.
Hello from your POS Terminal Controller!
    #prompt_confirm: Causes the user to verify another product should be entered.
Hello from your POS Terminal Controller!
    #prompt_for_product: Allows entry of a single product's pricelist as verified by 'enter' prompt.
  TBA - requirements not completed yet.
    Allows entry of product-id, price, defaulting for quantity and price (PENDING: Not yet implemented)
    Allows entry of product-id, price, qualifying quantity, and discounted price (PENDING: Not yet implemented)
    Verifies any item added to a cart is in the store. (PENDING: (first dependency))
  FUTURE possible work.
    Allows less-strict entry of products, eg defaults. (PENDING: Not yet implemented)
    Rector, KATA: Redesign to be responsibility-based, not object-based. (PENDING: Not yet implemented)
    Allows Unix-style redirect of Standard IO, stdin/stdout. (PENDING: Not yet implemented)
    #prompt_for_product: Specifically includes four prompts. (PENDING: Not yet implemented)

Pending:
  Cart FUTURE Possible work. Can delete an item from the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:66
  Cart FUTURE Possible work. Can find whether a product is in the cart.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:67
  Store FUTURE Possible work. Refactor Products Map to use symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:120
  Terminal/Shopping/ TBA - requirements not completed yet. Allows entry of product-id, price, defaulting for quantity and price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:54
  Terminal/Shopping/ TBA - requirements not completed yet. Allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:56
  Terminal/Shopping/ TBA - requirements not completed yet. Verifies any item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:58
  Terminal/Shopping/ FUTURE possible work. Allows less-strict entry of products, eg defaults.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:67
  Terminal/Shopping/ FUTURE possible work. Rector, KATA: Redesign to be responsibility-based, not object-based.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:70
  Terminal/Shopping/ FUTURE possible work. Allows Unix-style redirect of Standard IO, stdin/stdout.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:73
  Terminal/Shopping/ FUTURE possible work. #prompt_for_product: Specifically includes four prompts.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:78

Finished in 0.0625 seconds
40 examples, 0 failures, 10 pending

amoroney@surf256pro /cygdrive/c/amsrc/rmtry

===========================================================
.[]Status; Where i am; 

amoroney@surf256pro /cygdrive/c/amsrc/rmtry
$ rspec --version
C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin\ruby.exe: No such file or directory -- /cygdrive/c/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/rspec (LoadError)

amoroney@surf256pro /cygdrive/c/amsrc/rmtry
$

amoroney@surf256pro /cygdrive/c/amsrc/rmtry
$ rspec.bat ./spec/lib/*spec.rb --format documentation

Cart
  Context: There is a Store associated with this Cart to check products.
    #add Raises error if add a new item without any arguments, ie no Id.
    #count is 1 for one element.
    #count is 2 for two elements.
    #clear Resets a populated cart back to empty.
    #report Describes contents of one item as a string.
    #report Describes its contents of two items as a string.
    #report Describes an empty cart as having no elements.

Store
  #ProductMetadata gives the list of attributes found in the maximal constructor.
  #ConvertDollarsToPennies Rounds up.
  #Find_Product Returns true upon searching a product that is in the store.
  #Find_Product Returns false upon searching a product that is not in the store.
  #Find_Product Returns false upon searching for an invalid product.
  #Add_Product Raises error if duplicate product is entered.
  #Add_Product Raises error if discount quantity but not price is entered.
  #Add_Product Raises error if add a new item without any arguments, ie no Id.
  #Add_Product Raises error if add a new item without both Id and Price.
  #count is 1 for one element.
  #count is 2 for two elements.
  #clear Resets a populated store back to empty.
  #report Describes its contents as a string.
  #report Describes an empty store as having no elements.
  #Price_in_pennies: Raises error if price-check an empty store.
  #Price_in_pennies: Raises error if price-check an item not in the store.
  #Price_in_pennies: Returns the price in pennies for quantity of one.
  #Price_in_pennies: Returns the non-discounted price in pennies when there is no discount volume quantity.
  #Price_in_pennies: Returns the discounted total price in pennies for purchase size exactly equal to the discount volume quantity.
  #Price_in_pennies: Returns the minimally discounted total price in pennies for purchase size larger than the discount volume quantity.
  FUTURE Possible Refactorings.
    Products Map Uses symbols instead of strings as hash keys. (PENDING: cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby)

Terminal/Shopping/
  Says Hello to the (Admin) user upon instantiation.
  Does Not accept a redefined $stdin nor $stdout.
  Read/Write from System IO.
Hello from your POS Terminal Controller!
    #prompt_confirm: Causes the user to verify another product should be entered.
Hello from your POS Terminal Controller!
    #prompt_for_product: Allows entry of a single product's pricelist as verified by 'enter' prompt.
  TBA
    Allows entry of product-id, price, defaulting for quantity and price (PENDING: Not yet implemented)
    allows entry of product-id, price, qualifying quantity, and discounted price (PENDING: Not yet implemented)
    verifies item added to a cart is in the store. (PENDING: (first dependency))
    allows less-strict entry of products, eg defaults. (PENDING: Not yet implemented)
    FUTURE KATA: Redesign to be responsibility-based, not object-based. (PENDING: Not yet implemented)
    FUTURE: Allow Unix-style redirect of Stdio. (PENDING: Not yet implemented)

Pending:
  Store FUTURE Possible Refactorings. Products Map Uses symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:113
  Terminal/Shopping/ TBA Allows entry of product-id, price, defaulting for quantity and price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:54
  Terminal/Shopping/ TBA allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:56
  Terminal/Shopping/ TBA verifies item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:58
  Terminal/Shopping/ TBA allows less-strict entry of products, eg defaults.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:62
  Terminal/Shopping/ TBA FUTURE KATA: Redesign to be responsibility-based, not object-based.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:65
  Terminal/Shopping/ TBA FUTURE: Allow Unix-style redirect of Stdio.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:68

Finished in 0.06251 seconds
38 examples, 0 failures, 7 pending

amoroney@surf256pro /cygdrive/c/amsrc/rmtry
$


===========================================================
.[]
===========================================================
.[]
===========================================================
.[]140117f DONE Terminal how to mock.
==========================================================
1.[]DUP, what i was working on. ; X.An Example using RSpec double, mock, and stub
http://blog.firsthand.ca/2011/12/example-using-rspec-double-mock-and.html
An Example using RSpec double, mock, and stub

describe Transfer do
  context "transfer with amount of 10" do
    let(:source_account) { double('source account', :decrease => nil) }
    let(:destination_account) { double('destination_account', :increase => nil) }
 
    it "should decrease source account by 10" do
      source_account.should_receive('decrease').with(10)
     
      transfer = Transfer.new(source_account, destination_account, 10)
      transfer.call
    end
 
    it "should increase destination account by 10" do
      destination_account.should_receive('increase').with(10)
     
      transfer = Transfer.new(source_account, destination_account, 10)
      transfer.call
    end
  end
end
==========================================================
2.[]GREAT!; TODO ADD to spec_helper his random name creator, very nice; Codeship ; X.Codeship's Testing Tuesday #9: Stubbing and Mocking with RSpec | via @codeship
http://blog.codeship.io/2013/06/11/testing-tuesday-9-stubbing-and-mocking-with-rspec.html
Codeship's Testing Tuesday #9: Stubbing and Mocking with RSpec | via @codeship

Search

    Blog
    Testing Tuesday
    Deployment Academy
    Tech Room
    The Codeship Workflow
    Archive

via @codeship
Learn about Continuous Integration and Continuous Deployment, Software Testing and Test-Driven Development.

Where Continuous Integration and Continuous Deployment has its home.
June 11, 2013
Testing Tuesday #9: Stubbing and Mocking with RSpec
18
inShare

This is the ninth Testing Tuesday episode. Every week we will share our insights and opinions on the software testing space. Drop by every Tuesday to learn more! Last week we talked about Behavior-Driven Integration and Unit Testing with Cucumber and RSpec.

Set up Continuous Integration and Deployment for your Ruby on Rails projects. The Codeship supports GitHub and BitBucket projects and about any techstack you can imagine.
Specifying examples with RSpec

When you work Outside-In with Behavior-Driven Development your scenarios take care of checking that your application works from a user’s perspective. They don’t care at all how you implement something.

Let’s say we refactor a class of our application. Then we permanently want to make sure that we didn’t break anything by moving things around. Unfortunately this is impossible with integration tests, because they are just too slow. This is why we write examples that explain how our single components – like for example classes – should behave. These examples should be fast, so we can run them continuously while we make changes to a class. And they should only specify behavior of the own scope and ignore all behavior of other classes.

I am working in a Ruby on Rails App so I use RSpec to write these examples in this screencast, but there are Spec frameworks for a lot of other languages that work similar. Check out the further info section below to find out more.
Stubbing and Mocking with RSpec

Stubbing and Mocking makes your component examples independent of other components. You can stub methods on objects to let them return whatever you like. And you can use mock objects to replace instances of other classes. This screencast shows how to stub and mock using RSpec.
Up next Testing Tuesday: Designing code with RSpec

Stubbing and Mocking also facilitate designing software. They let you specify the code you wish you had without relying on code that’s already there. This makes you build better designed and more readable code. Check back next Testing Tuesday to find out how! Further info:

    The Codeship

    RSpec
    Spec frameworks for other languages:
        Java – why don’t you try running RSpec using JRuby?
        Python – Should-DSL gives you RSpec-like matchers. Mock lets you replace parts of your system with mock objects.
        PHP – There’s phpspec and spectrum for RSpec-like specifications and Phake for mocking.
        NodeJS – Choose one of mocha, Jasmine and nodespec. For mocking you can use Sinon.JS, node-gently and nodemock.

Transcript
Hide transcript (1,935 Less Words)

Ahoi and welcome! They call me Clemens Helm and this is Codeship Testing Tuesday #9. Last week we had a look at integration testing and unit testing. We learned how to write code outside-in with Behavior-Driven development and I also scratched the surface of specifying examples for single components of your application. We’ll go into more detail on this today: I’ll show you how to get most out of Rspec with Stubbing and Mocking and why RSpec examples are the perfect companions for your integration tests.

When you work Outside-In with Behavior-Driven Development, your Scenarios take care of checking that your application works from a user’s perspective. They don’t care at all how you implement something. These Scenarios are great for verifying that your application still works after you made a change. But they have two major disadvantages:

    Debugging (Working title)

When something breaks, it can be tricky to find out where the root of the problem is. Your failing scenario might show you an error message with a stack trace, but often the trouble is an entirely different part of your application. That’s when you have to read through logs and start cumbersome debugging sessions.

    Speed

Running your Scenarios is slow. They test your whole application stack and sometimes they even use a browser to check Javascript functionality. If we run all scenarios of the Codeship web application, this will take more than half an hour.

So integration tests are great for verifying that everything works as it should. But let’s say we refactor a class of our application. Then we permanently want to make sure that we didn’t break anything by moving things around. Unfortunately this is impossible with integration tests, because they are just too slow.

This is why we write examples, how our single components – like for example classes – should behave. These examples should be fast, so we can run them continuously while we make changes to a class. And they should only specify behavior of the own scope and ignore all behavior of other classes. Our scenarios are responsible for making sure that all our components work together, so we don’t need to check that in our component examples.

To write these examples we use RSpec here, but there are spec frameworks for a lot of other languages that work similar. Check out the further info section below to find out more.

Let’s say we’ve got an application like the Codeship, where a user has many projects. A user also has a full name, consisting of the first name and the last name. And we’ve got a project that belongs to a user.

App:

class User
  has_many :projects

  def full_name
    "#{first_name} #{last_name}"
  end
end

class Project
  belongs_to :user
end

When the project name is not set, we’d like to have a placeholder containing the user’s full name. So we write a scenario:

Scenario: Placeholder for projects without name
  Given I'm signed up as "Peter Parker"
  When I create a project without a name
  Then the project should be called "Peter Parker's project"

These are the step definitions for the scenario:

Given(/I'm signed up as ".*"/) do |user_name|
  first_name, last_name = user_name.split " "
  visit sign_up_path
  fill_in :first_name, with: first_name
  fill_an :last_name, with: last_name
  click_button :sign_up
end

When(/I create a project without a name/) do
  visit projects_path
  click_link "New project"
  fill_in :name, with: ""
  click_button :commit
end

Then(/the project should be called ".*"/) do |project_name|
  find(".project").should have_content project_name
end

When we run this scenario, it fails, because the project name is empty. Let’s fix this by writing an example for the project:

describe Project do
  it "should be named after the user if no name is set" do
    user = User.new first_name: "Peter", last_name: "Parker"
    project = Project.new
    project.user = user
    project.full_name.should == "Peter Parker's project"
  end
end

The Spec fails, but it’s quite easy to fix it:

def name
  read_attribute(:name) || "Peter Parker's project"
end

And now the example and the scenario succeed! But wait a minute, we filled in “Peter Parker”, so now the project is called “Peter Parker’s project”, no matter what user it belongs to. We strictly followed the guidelines of Behavior-Driven Development: Make the example pass with the least effort. So the next step would be to write the same scenario and the same example with a different name. In simple cases like this, I usually follow a different approach: I use random values for my examples.

I use a helper method named “random_name” to make this work:

describe Project do
  it "should be named after the user if no name is set" do
    first_name, last_name = 2.times.map { random_name }
    user = User.new first_name: first_name, last_name: last_name
    project = Project.new
    project.user = user
    project.full_name.should == "#{first_name} #{last_name}'s project"
  end

  def random_name
    ('a'..'z').to_a.sample(5).join
  end
end

This helper method generates a random name of 5 letters (show on irb shell). Let’s put this helper into our spec_helper file, so other examples can use it as well.

Now our spec fails (show output). To make it work, we need to fill in the user’s full name:

def name
  read_attribute(:name) || "#{user.full_name} project"
end

So now it works! But what’s the problem with this example? We’re not only testing the project’s behavior, but also the user’s. When we change the implementation of the User‘s full_name, our Spec will fail:

def full_name
  "#{last_name}, #{first_name}"
end

This is unexpected, because the project is still named after the user, so actually the Spec should still work. When we have a large example suite, these dependencies can cause a lot of work. One little change could lead to dozens of failing specs throughout our whole application. This also means that we would have to run all our examples after every change to make sure we didn’t break anything. But wasn’t this our problem with integration tests that we wanted to solve by specifying little examples?

As long as there are dependencies on other components in our examples, we will always run into this kind of problems. So how can we resolve them?

By stubbing all behavior of other classes the way we expect it to work. Let’s change our example to use stubbing:

describe Project do
  it "should be named after the user if no name is set" do
    full_name = random_name
    user = User.new
    user.stub full_name: full_name
    project = Project.new
    project.user = user
    project.full_name.should == "#{full_name}'s project"
  end

  def random_name
    ('a'..'z').to_a.sample(5).join
  end
end

Stubbing simulates a method by simply returning the value we’ve specified. So our user’s full_name method is never called and this way we’re independent of its implementation in this example. But there is one more dependency on the user: If we call User.new, this will invoke the constructor method of the user, which could also make our example fail. In fact, we don’t actually need anything from our user but its full name.

So we can just mock our user model instead. A mock is an object that we can use in behalf of another object. It has got only the functionality we assign it:

it "should be named after the user if no name is set" do
  full_name = random_name
  user = mock_model User, full_name: full_name
  project = Project.new
  project.user = user
  project.full_name.should == "#{full_name}'s project"
end

mock_model is RSpecs way of simulating a model. The advantage is that we can use it also as an association. There’s a more generic way of mocking an object: a double.

it "should be named after the user if no name is set" do
  full_name = random_name
  user = double full_name: full_name
  project = Project.new
  project.user = user
  project.full_name.should == "#{full_name}'s project"
end

The example fails now, because we can’t use a generic double as an association. However, we can just stub the association as well to make it work:

it "should be named after the user if no name is set" do
  full_name = random_name
  project = Project.new
  project.stub user: double(full_name: full_name)
  project.full_name.should == "#{full_name}'s project"
end

This is the version of the example that I would prefer, because it is concise and has no dependencies on other components.

Stubbing also helps us avoid database queries. Database queries are very slow in comparison to application code and they also add a dependency to our components, so we want to avoid them wherever possible. Consider this example:

it "should list project names" do
  number_names = rand 10
  names = number_names.times.map { random_name }
  user = User.create!
  names.each { |name| user.projects.create! name: name }
  user.project_names.should == names
end

Here we are creating a user and several associated projects in the database to prove that project names is a list of all projects’ names. But we neither need the database nor do we need projects in this example. We just need a list of objects with a name:

it "should list project names" do
  number_names = rand 10
  names = number_names.times.map { random_name }
  user = User.new
  user.stub projects: names.map { |name| double name: name }
  user.project_names.should == names
end

So in this example we didn’t need the database at all and we also didn’t need any project instances. The only component that was tested was the user class.

But isn’t it dangerous to work with mocks? In the end we never know in our examples, if the class we’re mocking will behave the same way as the mock! What if we assume something that doesn’t work the way we mock it?

Well, that’s what our integration tests are made for. Running our integration tests makes sure that everything we assumed in our component examples holds true in the “real” world. This is especially great for stubbing behavior that doesn’t even exist yet. Your integration tests will always remind you to implement this missing behavior.

But we’ll look into this in more detail next week! I will show you how to design your application properly using Behavior-Driven development with RSpec. I hope you liked this episode, and as always I’m looking forward to your comments! Special thanks to Amrit who suggested the topic for today’s episode. Have a beautiful week and see you again next Testing Tuesday. … fade out … Oh, there’s one more thing: Always stay shipping.
Further info:

    Spec frameworks for other languages:
        Java – why don’t you try running RSpec using JRuby?
        Python – Should-DSL gives you RSpec-like matchers. Mock lets you replace parts of your system with mock objects.
        PHP – There’s phpspec and spectrum for RSpec-like specifications and Phake for mocking.
        NodeJS – Choose one of mocha, Jasmine and nodespec. For mocking you can use Sinon.JS, node-gently and nodemock


Download Efficiency in Development Workflows: A free eBook for Software Developers. This book will save you a lot of time and make you and your development team happy.

Offload your DevOps work to Codeship, a smart Continuous Integration and Continuous Deployment service that helps you move forward. Setup only takes 3 minutes.
Author: Clemens Helm

I’m a passionate web application developer and Ruby on Rails enthusiast. I love building stunning web applications and start-ups that rock. And I love boarding – on the street, on water, on snow – there’s a board for every season.

Posted by: Clemens Helm | Conversation: 13 comments	| Category: Testing Tuesday	| Tags: continuous integration, frameworks, how-to, rails, RSpec, Ruby, screencast, tdd, testing, testing tuesday, tutorial	

    Vote on Hacker News

Next Post »
« Previous Post
The Codeship Blog

Home of your Codeship Crew.
We write about Continuous Integration, Continuous Deployment and show you how you can efficiently develop your software.
Latest posts

    Continuous Deployment to Google App Engine with Codeship
    Memory Monitoring And Limiting With LXC
    Continuous Integration and Continuous Deployment with Middleman, Codeship, and GitHub Pages
    Continuous Deployment: Are You Afraid It Might Work?
    The Best Podcasts of 2013

Download Efficiency in Development Workflows: A free eBook for Software Developers. This book will save you a lot of time and make you and your development team happy.
Find the Codeship elsewhere




Join 9,718 Newsletter Subscribers

The Codeship runs your tests and continuously deploys your code.

Set it up in 3 minutes!

Contact the Codeship crew on Twitter or shoot them a quick mail to contact@codeship.io.
Want to publish guest posts on our blog? Write Manuel a mail!

    RSS Feed
    RSS Comments


==========================================================
3.[]TODO READ  ; X.Codeship's Testing Tuesday #11: Reliable mocks with Bogus | via @codeship
http://blog.codeship.io/2013/06/25/testing-tuesday-11-reliable-mocks-with-bogus.html
Codeship's Testing Tuesday #11: Reliable mocks with Bogus | via @codeship

Learn about Continuous Integration and Continuous Deployment, Software Testing and Test-Driven Development.

Where Continuous Integration and Continuous Deployment has its home.
June 25, 2013
Testing Tuesday #11: Reliable mocks with Bogus
22
inShare

This is the eleventh Testing Tuesday episode. Every week we will share our insights and opinions on the software testing space. Drop by every Tuesday to learn more! Last week we talked about how to design your code in RSpec with stubbing and mocking before you even implement it.

Set up Continuous Integration and Deployment for your Ruby on Rails projects. The Codeship supports GitHub and BitBucket projects and about any techstack you can imagine.
Refactor with Bogus, not Integration tests

In the last few episodes we always backed our RSpec examples with a Cucumber feature that checked if we implemented all behavior. This allowed us to stub behavior of other components in our unit tests, because Cucumber would check if this behavior works anyway.

While this works well for implementing new features it is a pain when you want to refactor your code. You always need to run your whole slow integration test suite to make sure that all your mocked behavior still works.

In this screencast we explore together with James Bond how to solve this problem using a nifty mocking library called Bogus in our RSpec examples.
Up next Testing Tuesday: Our EuRuKo 2013 Recap

Next week there’s a Testing Tuesday special edition. I will show you my personal highlights from the European Ruby conference EuRuKo that will take place this Friday and Saturday in Athens, Greece.
Further info:

    The Codeship
    Bogus (Relish)
    Bogus (GitHub)
    RSpec
    James Bond
    Ruby 2.0: Keyword arguments

Transcript
Hide transcript (772 Less Words)

Ahoy and welcome! My name is Clemens the Helm and you’re watching Codeship Testing Tuesday #11.

Last week I showed you how to design your application with stubbing and mocking. Back then we used our Cucumber scenarios to make sure that all behavior we mocked got in fact implemented.

This makes it hard to refactor your code though, because you need to run your slow integration test suite to check if your mocked behavior still works.

This is where Bogus comes in handy.

Offload your DevOps work to Codeship, a smart Continuous Integration and Continuous Deployment service that helps you move forward. Setup only takes 3 minutes.

This week I feel very honored because James Bond himself ordered an application to manage his missions. One thing he wants to know is when he is ready to start a mission.

Here is the first example of this behavior using RSpec doubles.

describe Mission do
  it "checks protocol for 007’s mission start" do
    meeting_with_m = double outcome: [:top_secret_briefing]
    meeting_with_q = double outcome: [:aston_martin, :laser_Rolex]
    mission = Mission.new meetings: [meeting_with_m, meeting_with_q]
    mission.should be_ready_to_go
  end
end

So after getting the required assets in meetings with M and Q the mission should be ready to go. We’ve also got a Mission class that’s empty so far.

We’re mocking the dependency on another class – probably a Meeting class – so we only test the behavior of our Mission. This Offload your DevOps work to Codeship, a smart Continuous Integration and Continuous Deployment service that helps you move forward. Setup only takes 3 minutes., where classes get implemented before other collaborators exist, is basically very nice, because it makes us independent of the other class’ implementation.

But the problem is that we also expect a meeting to have an outcome method. When we implement this code we will probably be driven by an integration test that makes sure that all mocked behavior gets implemented. But when we refactor our code we don’t want to run the whole integration test suite to check all our mocks, because that would kill our productivity.

So wouldn’t it be nice if our unit tests already verified the methods that we stub?

Bogus is a library that aims to reduce the risks associated with isolated unit testing.

It does not only make sure that our examples work using mocks, it also assures those mocked classes EXIST and have the methods we’re stubbing.

Let’s run RSpec first to see what error we would get for this example.

RSpec only complains about the constructor of our Mission class that doesn’t take any arguments.

Let’s try the same with bogus. We need to require ‘bogus/rspec’ in our spec_helper.rb file and change our example to use bogus fakes:

describe Mission do
  it "checks protocol for 007’s mission start" do
    meeting_with_m = fake :meeting, outcome: [:top_secret_briefing]
    meeting_with_q = fake :meeting, outcome: [:stylish_Aston_Martin, :laser_Rolex]

    mission = Mission.new meetings: [meeting_with_m, meeting_with_q]
    mission.should be_ready_to_go
  end
end

The first thing Bogus tells us when we run RSpec now is that it can’t find the Meeting class. So Bogus checks that we don’t mock a class that doesn’t actually exist. Let’s create this class.

The next thing Bogus checks is if there is a method outcome for our Meeting class. Bogus doesn’t only check for the classes we mock, but also for the methods we stub.

If we add the method, we finally receive the error message we got before using Bogus. We can fix it by implementing a constructor that accepts one argument. (meeting: meeting) By the way, this is a Ruby 2.0 named argument that makes your code a lot more descriptive. If you haven’t heard of them, you should definitely check them out!

But back to the example. We still need a method ready_to_go? to make it work. Aaand ready to go should be true.

Ok, now we’ve got our example working. Obviously we need more examples for this method to be complete, but let’s skip that for now.

So what’s the real advantage of using Bogus? When we decide to change our outcome method to be called result at some point, Bogus will immediately complain.

We don’t have to run our slow integration test suite to check that our mocked behavior works. This will keep us more productive, agile and – most of all – it will make testing more fun.

This was a very short introduction, but there’s a lot more that Bogus has to offer. We’ll look into it in more detail in 2 weeks.

I have to go now because I’ve got to pack my bags for Euruko, the European Ruby conference in Athens. If you go there as well, drop me a line to clemens@codeship.io, I’d be thrilled to meet you there!

If not, check out next week’s episode where I’ll show you my personal Euruko highlights!

Either way, there’s something that I need to tell you: Always stay shipping!
==========================================================
4.[] ; X.Message expectations - RSpec Mocks - RSpec - Relish
https://relishapp.com/rspec/rspec-mocks/docs/message-expectations
Message expectations - RSpec Mocks - RSpec - Relish
Message expectations
Basics

# create a double
obj = double()

# expect a message
obj.should_receive(:message)

# specify a return value
obj.should_receive(:message) { :value }
obj.should_receive(:message => :value)
obj.should_receive(:message).and_return(:value)

These forms are somewhat interchangeable. The difference is that the
block contents are evaluated lazily when the obj receives the
message message, whereas the others are evaluated as they are read.
Fake implementation

obj.should_receive(:message) do |arg1, arg2|
  # set expectations about the args in this block
  # and set a return value
end

Using the original implementation

obj.should_receive(:message).and_call_original

Raising/Throwing

obj.should_receive(:message).and_raise("this error")
obj.should_receive(:message).and_throw(:this_symbol)

You can also use the block format:

obj.should_receive(:message) { raise "this error" }
obj.should_receive(:message) { throw :this_symbol }

Argument constraints
Explicit arguments

obj.should_receive(:message).with('an argument')
obj.should_receive(:message).with('more_than', 'one_argument')

Argument matchers

obj.should_receive(:message).with(anything())
obj.should_receive(:message).with(an_instance_of(Money))
obj.should_receive(:message).with(hash_including(:a => 'b'))

Regular expressions

obj.should_receive(:message).with(/abc/)

Counts

obj.should_receive(:message).once
obj.should_receive(:message).twice
obj.should_receive(:message).exactly(3).times

obj.should_receive(:message).at_least(:once)
obj.should_receive(:message).at_least(:twice)
obj.should_receive(:message).at_least(n).times

obj.should_receive(:message).at_most(:once)
obj.should_receive(:message).at_most(:twice)
obj.should_receive(:message).at_most(n).times

Ordering

obj.should_receive(:one).ordered
obj.should_receive(:two).ordered

Topics

    expect a message on any instance of a class
    warn when expectation is set on nil
    allow a message on any instance of a class
    Calling the original method
    expect message using `expect`
    expect message using `should_receive`
    Message chains in the expect syntax
    receive counts

==========================================================
5.[] ; X.String concatenation and Ruby - Stack Overflow
http://stackoverflow.com/questions/377768/string-concatenation-and-ruby
String concatenation and Ruby - Stack Overflow
 157 down vote accepted
	

You can do that in several ways:

    As you shown with << but that is not the usual way

    With string interpolation

    source = "#{ROOT_DIR}/#{project}/App.config"

    with +

    source = "#{ROOT_DIR}/" + project + "/App.config"

The second method seems to be more efficient in term of memory/speed from what I've seen (not measured though). Methods 1 and 3 throw a NoMethodError when ROOT_DIR is nil.

When dealing with pathnames, you may want to use File.join to avoid messing up with pathname separator.

In the end, it is a matter of taste.
share|improve this answer
	
edited Jul 23 '11 at 21:47 
==========================================================
6.[] ; X.Example rails 3.1 spec_helper.rb file using spork, rspec, factory_girl, database_cleaner, I18n
https://gist.github.com/stanislaw/1731259
Example rails 3.1 spec_helper.rb file using spork, rspec, factory_girl, database_cleaner, I18n
require 'spork'
 
Spork.prefork do
# Loading more in this block will cause your tests to run faster. However,
# if you change any configuration or code from libraries loaded here, you'll
# need to restart spork for it take effect.
 
# This file is copied to spec/ when you run 'rails generate rspec:install'
ENV["RAILS_ENV"] ||= 'test'
require File.expand_path("../../config/environment", __FILE__)
require 'rspec/rails'
require 'rspec/autorun'
 
require 'shoulda/matchers/integrations/rspec'
 
require "rails/application"
Spork.trap_method(Rails::Application::RoutesReloader, :reload!)
 
# Requires supporting ruby files with custom matchers and macros, etc,
# in spec/support/ and its subdirectories.
Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}
 
RSpec.configure do |config|
config.mock_with :rspec
 
require 'database_cleaner'
config.before(:suite) do
DatabaseCleaner.strategy = :transaction
DatabaseCleaner.clean_with(:truncation)
end
 
config.before(:each) do
DatabaseCleaner.start
end
 
config.after(:each) do
DatabaseCleaner.clean
end
 
end
end
 
Spork.each_run do
 
I18n.backend.reload!
 
Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }
 
require 'factory_girl'
 
FactoryGirl.definition_file_paths = [
File.join(Rails.root, 'spec', 'factories')
]
 
FactoryGirl.find_definitions
 
end
==========================================================
7.[] ; X.One RSpec stub, many return values | mentalized
http://mentalized.net/journal/2013/03/13/one_rspec_stub_many_return_values/
One RSpec stub, many return values | mentalized

One RSpec stub, many return values

Posted March 13, 2013 in Programming

Using RSpec Mocks it is trivially easy to stub a single method:

colors.stub(:favorite).with("Person A").and_return("Mauve")

It is also easy to have different stubs for different arguments:

colors.stub(:favorite).with("Person A").and_return("Mauve")
colors.stub(:favorite).with("Person B").and_return("Olive")

However, the other day I needed to stub out the same method many times for a fair amount of different arguments and repeating the foo.stub(...).with(...).and_return() part gets tedious real fast.

Thankfully, RSpec stubs have a way around this.

RSpec docs call this a “Stub with substitute implementation”. You simply setup a fake implementation for a method by passing the stub a block.

We can use this to setup a look up table inside the stubbed method to give is pretty granular control over what it returns:

colors.stub(:favorite) do |argument|
  values = {"Person A" => "Mauve", "Person B => "Olive"}
  return values[argument]
end

This way, whenever your tests call colors.favorite the argument they pass along is used to look up the returned result in the Hash inside the stub.

This has proven quite useful when your FavoriteColorService talks to a DNA sequencer live and we don’t want each test run to wait 4 weeks for each result.


===========================================================
.[]test other half, the prompt
===========================================================
.[]BUG: want to stub the thing before chomp so chomp won't error, yet also want the gets' call to be tested.
1.43p
===========================================================
.[]


===========================================================
.[]ERROR ; nb must stub an item in order to spy on it and see it was called?!!

RSpec::Mocks::MockExpectationError: #<Mirror:0x231cd08> expected to have received gets, but that method has not been stubbed.
./specLib/zRspecMock_spec.rb:38:in `block (2 levels) in <top (required)>'

  it '#prompt_and_echo: Receives entered text with Gets.' do
    @mirror = Mirror.new
    @mirror.stub(:fixup).and_return( "stubbed-typing\n" ) #Collaborator
    @mirror.prompt_and_echo
    expect(@mirror).to have_received( :gets  )
  end
===========================================================
.[x]WORKS rspec-tip v3 has spies which means that can post process expectations at the end and use past-tense to show that they should already have occurred once the code was run , ie before it.

  it '#prompt_and_echo: Receives entered text with Gets.' do
    @mirror = Mirror.new
    @mirror.stub(:fixup).and_return( "stubbed-typing\n" ) #Collaborator
    #@mirror.stub(:chomp) { "stubbed-typing\n" } #Collaborator
    #@mirror.stub(:response) { "stubbed-typing\n" } #Collaborator
    @mirror.prompt_and_echo
    expect(@mirror).to have_received( :gets  )
  end
==========================================================
1.[] ; X.Add Syntax for Spies · Issue #220 · rspec/rspec-mocks
https://github.com/rspec/rspec-mocks/issues/220
Add Syntax for Spies · Issue #220 · rspec/rspec-mocks
 jfelchner opened this issue a year ago
Add Syntax for Spies
Milestone: 3.0  
No one is assigned

Now that we have a handle on the new syntax for mocks and stubs (#153 - the length of the issue is not for the faint of heart), I think that the oft-requested feature of adding spies to RSpec may more easily "fall out" of that implementation.

The consistency of the expect syntax and the new allow syntax reads great and I'd like to discuss taking that syntax further into the notion of spies.

    For the uninitiated and to make sure there's no ambiguity regarding terms here are some simplified definitions:

        A stub is just a dumb object that knows how to receive some set of method calls and returns predetermined values for them.
        A spy is just like a stub except that it remembers all the messages sent to it.
        A mock is just like a spy except that you can tell it what messages you're expecting it to receive and it will blow up if it doesn't receive those.

    PS: I'd prefer this issue didn't turn into a pedantic holy war debate about what the definition of a spy "really" is.

First, I'm going to summarize the use case for spies in RSpec and how it will improve readability. I'm using the new syntax discussed in #153. And I'm offering two options for a spy syntax; variations of which were also discussed in #153.
Current

Our current syntax (without spies) would produce something like this:

# http://www.imdb.com/title/tt0102926/
context 'when Buffalo Bill gives his captive the hose' do
  it 'puts the lotion in the basket' do
    expect(basket).to receive(:<<).with(lotion).once

    BuffaloBill.spray_water_on_captive
  end
end

Spy Syntax Option 1

context 'when Buffalo Bill gives his captive the hose' do
  it 'puts the lotion in the basket' do
    expect { BuffaloBill.spray_water_on_captive }.to send(:<<).to(basket).with(lotion).once
  end
end

It appears that the only stumbling block is around whether to override send in the context of the matcher. Readability-wise, I think this is great, although it is quite a bit to chew off one one line.
Spy Syntax Option 2

Another option utilizes a new have_received matcher which also has its advantages.

context 'when Buffalo Bill gives his captive the hose' do
  it 'puts the lotion in the basket' do
    allow(basket).to receive(:<<)

    BuffaloBill.spray_water_on_captive

    expect(basket).to have_received(:<<).with(lotion).once
  end
end

Implementation

I'm not sure about everyone else, but I like to approach a new feature from the user's perspective first and then deal with implementation.

In Option 2, it would appear that this would require that all stubs actually be spies under the hood. In other words, all stubbed objects are recording their messages. This is easy if the object is stubbed as it is in Option 2 but we would need to have some mechanism for turning an object into a spy without additionally stubbing any methods. Maybe:

allow(basket).to remember_messages

My Opinion

Honestly I kind of like Option 2 slightly more because building up the stub may need to be done in a separate context which would make Option 1 basically unusable.

Thoughts everyone?

==========================================================
1.[] ; X.Add test spies by jferris · Pull Request #241 · rspec/rspec-mocks
https://github.com/rspec/rspec-mocks/pull/241
Add test spies by jferris · Pull Request #241 · rspec/rspec-mocks
 jferris opened this pull request 10 months ago
Add test spies
No milestone
No one is assigned

    Adds have_received matcher
    Extends Proxy/MethodDouble/MessageExpectation
    Records all invocations on stubbed methods
    Resolves #220.

I ended up including a have_received method in rspec-mocks and not touching rspec-expectations, because:

    have_received returns a good result object (a matcher) that you can use for boolean checks and a failure message, which we want in rspec-mocks
    have_received would make little sense in rspec-expectations if you weren't also using rspec-mocks

I resurrected some invocation recording functionality in received_messages? that seems to have been somewhat broken for a while. It was added in 2007 for ZenTest support, and seems to have been moved forward with every release without modification since then. Previously it only ever recorded messages for null object mocks; I updated it to record messages for any stubbed method.

The matcher works in negative cases using should_not/not_to; I decided not to implement never, because combining should_not and never has proven to be confusing to bourne users. I figured it would be easier to just have one, standard way to write negative expectations.

There was one weird situation I wasn't sure how to deal with on MethodDouble. Every MethodExpectation expects to have a expected_from backtrace line, because previously errors would be inserted where the expectation was set. This isn't necessary with have_received, because it raises a normal exception from where the expectation failed. I ended up passing a useless backtrace line with caller(1)[0] that isn't ever used.

Feedback welcome.

===========================================================
.[]
NameError: undefined local variable or method `fixup' for #<RSpec::ExampleGroups::ReadWriteFromSystemIOViaRegularStub:0x23bf350>
./specLib/zRspecMock_spec.rb:34:in `block (2 levels) in <top (required)>'


class Mirror
  def prompt_and_echo
    print "Please enter something: "
    # Do not chain gets.chomp so that can test more easily.
    response = gets
    response = fixup(response)
    puts "#{response}"
  end

  def fixup(aString)
    aString.chomp
  end
end

describe 'Read/Write from System IO - via regular stub.' do

  it '#prompt_and_echo: Receives entered text with Gets.' do
    @mirror = Mirror.new
    @mirror.stub(fixup) { "stubbed-typing\n" } #Collaborator
    #@mirror.stub(:chomp) { "stubbed-typing\n" } #Collaborator
    #@mirror.stub(:response) { "stubbed-typing\n" } #Collaborator
    expect(@mirror).to receive( :gets  )
    @mirror.prompt_and_echo
  end

===========================================================
.[]IO testing; ok now on the 2/3 tests; 1.prompt/print; 2.gets; 3.ack/puts.
1.20p
==========================================================
1.[]@family.stub(:location).and_return('first', 'second', 'other') ; X.ruby on rails - Can RSpec stubbed method return different values in sequence? - Stack Overflow
http://stackoverflow.com/questions/5947999/can-rspec-stubbed-method-return-different-values-in-sequence
ruby on rails - Can RSpec stubbed method return different values in sequence? - Stack Overflow

===========================================================
.[\]refactor mock = just add pending.
===========================================================
.[]delete these are aok
#require 'rspec/mocks' #Name is rspec-mocks
    #RSpec::Mocks::setup(Mirror.new)

===========================================================
.[]GREEN tiny mock
===========================================================
.[]WIP 150115w ; 1.'permission denied' gets; 2.mock get to rspec it.
===========================================================
.[]WORKS, lol, due to forgot to say to actually do it. 12.30p


===========================================================
.[]WORKS; rid of the expct bug; 
require 'rspec'
require 'rspec/mocks' #Name is rspec-mocks
require 'logger'
require './spec/lib/custom_stdout_matcher'

# http://stackoverflow.com/questions/20275510/how-to-avoid-deprecation-warning-for-stub-chain-in-rspec-3-0
# Notice that it's setting the rspec-mocks syntax, not the rspec-expectations syntax
RSpec.configure do |config|
  config.mock_with :rspec do |c|
    c.syntax = [:should, :expect]
  end
end

===========================================================
.[]small progress, stub without ! is ok, but still... 1.deprecated remark when no such should used; 2.claims no calls. 
12.21p

Deprecation Warnings:

Using `stub` from rspec-mocks' old `:should` syntax without explicitly enabling the syntax is deprecated. Use the new `:expect` syntax or explicitly enable `:should` instead. Called from C:/amsrc/rmtry/specLib/zRspecMock_spec.rb:24:in `block (2 levels) in <top (required)>'.


If you need more of the backtrace for any of these deprecations to
identify where to make the necessary changes, you can configure
`config.raise_errors_for_deprecations!`, and it will turn the
deprecation warnings into errors, giving you the full backtrace.

RSpec::Mocks::MockExpectationError: (#<Mirror:0x1d52558>).puts("stubbed-typing")
    expected: 1 time with arguments: ("stubbed-typing")
    received: 0 times with arguments: ("stubbed-typing")
./specLib/zRspecMock_spec.rb:25:in `block (2 levels) in <top (required)>'
==========================================================
1.[]BUG 12p
C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin\ruby.exe -e $stdout.sync=true;$stderr.sync=true;load($0=ARGV.shift) C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin/rspec C:/amsrc/rmtry/specLib/zRspecMock_spec.rb --require teamcity/spec/runner/formatter/teamcity/formatter --format Spec::Runner::Formatter::TeamcityFormatter
Testing started at 12:03 PM ...

NoMethodError: undefined method `stub!' for #<Mirror:0x1d22558>
./specLib/zRspecMock_spec.rb:24:in `block (2 levels) in <top (required)>'

1 example, 1 failure, 0 passed

Finished in 0.004996 seconds

Process finished with exit code 1

require 'rspec'
require 'rspec/mocks' #Name is rspec-mocks
require 'logger'
require './spec/lib/custom_stdout_matcher'

class Mirror
  def prompt_and_echo
    print "enter something: "
    response = gets.chomp
    puts "#{response}"
  end
end

describe 'Read/Write from System IO.' do
  # http://stackoverflow.com/questions/4609872/rspec-commandline-variable-input
  def ask(aFcn)
    # []TODO confirm yield not more appropriate
    (Terminal::TerminalPos.new).aFcn
  end

  it '#prompt_and_echo: Writes Echo for text.' do
    RSpec::Mocks::setup(Mirror.new)
    @mirror = Mirror.new
    @mirror.stub!(:gets) { "stubbed-typing\n" } #Collaborator
    expect(@mirror).to receive( :puts ).with("stubbed-typing")
    # Answering the prompt is not actually required.
    #expect { gui.prompt_for_product }.to match_stdout("enter x to stop")
  end
end
==========================================================
1.[]NTF you’re declaring a mock in an example group (describe() block) instead of an example (it() block).; X.Pragmatic Forums | rspec - undefined method 'mock'
https://forums.pragprog.com/forums/95/topics/3216
Pragmatic Forums | rspec - undefined method 'mock'
Back to: All Forums → The RSpec Book → rspec - undefined method 'mock'
24 Aug 2009, 00:28
Generic-user-small

Adam Trepanier (4 posts)
	

I am working with Chapter 6.3 and trying to do mock(“messenger”) and the error I get with running rspec is: undefined method `mock’ for Spec::Example::ExampleGroup::Subclass_1::Subclass_1:Class (NoMethodError).

No idea why it is not working. I have the rspec gem 1.2.8 installed.
24 Aug 2009, 08:14
Dchelimsky_pragsmall

David Chelimsky (206 posts)
	

From the error message it sounds like you’re declaring a mock in an example group (describe() block) instead of an example (it() block).

HTH, David
24 Aug 2009, 22:47
Generic-user-small

Adam Trepanier (4 posts)
	

yeah I am a moron, I missed a whole line. ‘it “should send a welcome message” do’ your post lead me to the answer.
==========================================================
1.[]CQblog TODO; Biz that does remote CI/CD for people GREAT short 10m lots content video, with Transcript???! ; X.Codeship's Testing Tuesday #9: Stubbing and Mocking with RSpec | via @codeship
http://blog.codeship.io/2013/06/11/testing-tuesday-9-stubbing-and-mocking-with-rspec.html
Codeship's Testing Tuesday #9: Stubbing and Mocking with RSpec | via @codeship

integration tests; 
1.debug bug; problems if chg and try to debug, error will be somewhere else.
2.speed bug; take 30m if use javascript, so slow

spec framework to write examples . see rspec/relish DOC

class user 
class project
scenario, placeholder for projects w/o name = called peter if not given
given   [i'm signed up ]; when [visit prjpath]
cuke expected but not find

fix w/ex. @4.07
describe prj do
it 'named after peter if no name' do
user = user.new first_name: 'peter', last_name: 'parker'
prj = prj.new
prj.user = user
prj.name.should== 'peter parker's prj'
end 
end

got nil at first. fix.
prj
belongs_to :user
attr_accessible :name
def name  = read_attribute(:name).presence || "peter p prj"
=> ok

bug;
helper 
def random_name
('a'..'z').to_a.sample(5).join #COOL make 5 chars random

so in describe ; 
first, last = 2.times.map{random_name}
#put at eof spec helper so have random

#{user.rullname}


bug; 
when chg order or name in fullname, fail, but the name is actually the same
this causes alot of work. 
would need rerun all ex's 
any dependencies on other components caused this.
fix = stub

fullname = random-name
user.new ; user.stub fullname: fullname
expect -='#{fullname}'s project"
but actually user also we not need
user = mock_model user, fullname; fullname

even more generic; double
fail b can't use active record  assn 
stub that too
prj= prj.new
prj.stub user double( fullname: fullname)
prj.name.should==

bug? danger use mocks? never know if really working, but that's what integ tests are for. 
esp great for stubbing behavior that doesn't even exist; your integ test will tell you how

thx Amrit for topic, have a beautiful week.
one more thing; Always Stay Shipping.


==========================================================
1.[]Re-look at answer given stub-passive ; X.ruby - rspec commandline variable input - Stack Overflow
http://stackoverflow.com/questions/4609872/rspec-commandline-variable-input
ruby - rspec commandline variable input - Stack Overflow
class Mirror
  def echo
    print "enter something: "
    response = gets.chomp
    puts "#{response}"
  end
end

require 'rspec'
describe Mirror do
  it "should echo" do #testing the puts person not the gets
    @mirror = Mirror.new
    @mirror.stub!(:gets) { "phrase\n" }
    @mirror.should_receive(:puts).with("phrase")
    @mirror.echo
  end
end
==========================================================
1.[] ; X.Configure any test framework to use rspec-mocks - Outside rspec - RSpec Mocks - RSpec - Relish
https://www.relishapp.com/rspec/rspec-mocks/v/2-1/docs/outside-rspec/configure-any-test-framework-to-use-rspec-mocks
Configure any test framework to use rspec-mocks - Outside rspec - RSpec Mocks - RSpec - Relish
Configure any test framework to use rspec-mocks

Test frameworks that want to use rspec-mocks can use
RSpec::Mocks::setup(self) to hook into rspec-mocks. Doing so adds the
following:

To the object passed to setup:

double # creates a test double
mock   # creates a test double
stub   # creates a test double

To every object in the system:

should_receive
should_not_receive
stub

In order to give control to the consuming framework, none of these facilities
are added until RSpec::Mocks::setup(self) is called. Simply requiring
'rspec/mocks' is not sufficient.

NOTICE: the stub() method that is added to the object passed to setup is not
the same stub() method that is added to every other object.

Scenarios

        RSpec::Mocks::setup(object) adds double, mock, and stub methods to the submitted object
        RSpec::Mocks::setup(anything) adds methods to Object
        require "rspec/mocks" does not add methods to Object

    RSpec::Mocks::setup(object) adds double, mock, and stub methods to the submitted object

        Given
            a file named "foo.rb" with:

            require 'rspec/mocks'

            class CodeExample
              def init
                RSpec::Mocks::setup(self)
              end
            end

            example = CodeExample.new
            example.init

            puts example.respond_to?(:double)
            puts example.respond_to?(:mock)
            puts example.respond_to?(:stub)

        When
            I run "ruby foo.rb" 
        Then
            the output should contain "true" 
        But
            the output should not contain "false" 

    RSpec::Mocks::setup(anything) adds methods to Object

        Given
            a file named "foo.rb" with:

            require 'rspec/mocks'

            RSpec::Mocks::setup(Object.new)

            obj = Object.new

            puts obj.respond_to?(:should_receive)
            puts obj.respond_to?(:should_not_receive)
            puts obj.respond_to?(:stub)

        When
            I run "ruby foo.rb" 
        Then
            the output should contain "true" 
        But
            the output should not contain "false" 

    require "rspec/mocks" does not add methods to Object

        Given
            a file named "foo.rb" with:

            require 'rspec/mocks'

            obj = Object.new

            puts obj.respond_to?(:should_receive)
            puts obj.respond_to?(:should_not_receive)
            puts obj.respond_to?(:stub)

        When
            I run "ruby foo.rb" 
        Then
            the output should contain "false" 
        But
            the output should not contain "true" 

Last published about 1 year ago by dchelimsky.

==========================================================
4.[]DEFN: Double=can do either; Stub= passive, but need its collaboration; Mock= active exercised API, we say what method the API should have and then expect it is called onthe target ; X.RSpec double, mock, and stub
http://blog.firsthand.ca/2011/01/rspec-double-mock-and-stub.html
RSpec double, mock, and stub

==========================================================
5.[]GREAT sample; takeaway is if not caring about the readability/conventions, Double does same thing  ; X.An Example using RSpec double, mock, and stub
http://blog.firsthand.ca/2011/12/example-using-rspec-double-mock-and.html
An Example using RSpec double, mock, and stub
Blog
Wednesday, December 21, 2011
An Example using RSpec double, mock, and stub

This is a follow-up post for RSpec double, mock, and stub from earlier this year. A reader asked for an example code to illustrate the various double aliases in RSpec.

For this example we will spec a Transfer class that encapsulates the use case of transferring an amount between two accounts, the source account and destination account. The Transfer is the subject of our examples, while the source and destination accounts are the collaborators.

In the spec below, the first example "should decrease source amount by 10", specifies the interaction for the source account, hence the use of the mock to generate the test double. In this example, the destination account is treated as a secondary collaborator, as we are focusing on the role of the source account. Any object can play the role of the source account, as long as it responds to the #decrease method.

In the second example "should increase destination account by 10", the destination account is the primary collaborator. The use of mock to generate the source account communicates this intent.
	
describe Transfer do
  context "transfer with amount of 10" do
    it "should decrease source account by 10" do
      source_account      = mock('source account')
      destination_account = stub('destination_account').as_null_object
     
      source_account.should_receive('decrease').with(10)
     
      transfer = Transfer.new(source_account, destination_account, 10)
      transfer.call
    end
 
    it "should increase destination account by 10" do
      source_account      = stub('source account').as_null_object
      destination_account = mock('destination_account')
     
      destination_account.should_receive('increase').with(10)
     
      transfer = Transfer.new(source_account, destination_account, 10)
      transfer.call
    end
  end
end

However, there is some duplication in this spec which can be eliminated by moving the test doubles to let blocks. It's appropriate to use double here to generate the source and destination accounts as both play primary and secondary collaborators in the following examples. Below we stub the methods for each collaborator, then set expectations on those methods for the appropriate examples.

describe Transfer do
  context "transfer with amount of 10" do
    let(:source_account) { double('source account', :decrease => nil) }
    let(:destination_account) { double('destination_account', :increase => nil) }
 
    it "should decrease source account by 10" do
      source_account.should_receive('decrease').with(10)
     
      transfer = Transfer.new(source_account, destination_account, 10)
      transfer.call
    end
 
    it "should increase destination account by 10" do
      destination_account.should_receive('increase').with(10)
     
      transfer = Transfer.new(source_account, destination_account, 10)
      transfer.call
    end
  end
end

Update: Radoslav Stankov provides a cleaner refactoring of the spec.

The implementation of the transfer class may look something like this:

	
class Transfer
  def initialize(source_account, destination_account, amount)
    @source_account      = source_account
    @destination_account = destination_account
    @amount              = amount
  end
   
  def call
    # In a complete implementation, it would make sense to have the following
    # lines wrapped in a transaction, but I wanted to keep this example simple
    #
    @source_account.decrease(amount)
    @destination_account.increase(amount)
  end
end

It's important to remember that double, mock, and stub all return an instance of RSpec::Mocks::Mock. While the concepts of mocking, (i.e. setting a method expectation), and stubbing are "method-level concepts"[1], the use of mock and stub can communicate which collaborator you are specifying the behaviour for.

[1] For a more complete discussion on this, checkout The RSpec Book.

Posted by Nicholas Henry at 3:30 PM 4 Comments
Labels: rspec 
==========================================================
6.[]PrjMgmt; Scrum/SPRINT DEFN: To ensure you get dedicated, focused time for your project, I book 4 day blocks (Monday-Thursday) at a time. A 4 day block is charged at $3000 (plus taxes), based on a $100/hr rate. Fridays are set aside for any maintance obligations for other clients, research or open source contributors.  a Time and Materials contract, not a Fixed-price  ; X.Fees - Firsthand Web Development Montréal, Ruby on Rails, Custom CMS
http://www.firsthand.ca/fees
Fees - Firsthand Web Development Montréal, Ruby on Rails, Custom CMS


Call Montreal, Canada 524-949-6869
Firsthand Web Design

    Projects
    About
    Fees
    Contact
    Blog

Fees
Dedicated blocks of time, 100% focused on your project

To ensure you get dedicated, focused time for your project, I book 4 day blocks (Monday-Thursday) at a time. A 4 day block is charged at $3000 (plus taxes), based on a $100/hr rate. Fridays are set aside for any maintance obligations for other clients, research or open source contributors. Depending on the type of project, our engagement can be a single week, or maybe several months.
Estimates and Billing

Our engagement is based on a Time and Materials contract, not a Fixed-price contract. A budget will be recommended before the project starts based on past projects with a similar scope. A deposit of $3000 (plus taxes) will be required before the project starts and invoices will be submitted every two weeks. Payment is required on receipt of an invoice.
Project Visibility

Demostrations of work completed are held every Thursday afternoon from week one to get your feedback and ensure you have the highest visibility into the project. You're not waiting for weeks or months before you get to see something.

Ready to get started? »
Development Experience

    Over seventeen years application development experience, six years developing with Ruby on Rails
    Content Management Systems (CMS) developed with RDBMS's and NoSQL's.
    E-commerce with PayPal, Authorize.net, Braintree and Recurly integration.
    Custom Backoffice Integration with XML.
    Reusable Horizontal Applications using Engines.
    Past experience in other server-side technologies such as Coldfusion and PHP

Web Blog Entries

    Installation instructions for Quarto on OSX
    Vendoring Binaires on Heroku: An Example with Aspell
    Talk: Meet Trello

Recent Tweets

    Still love this quote: "For better or for worse, the patterns you establish today will be replicated forever." @sandimetz #poodr
    Just reminded myself meta programming is just plain wrong in your application layer.
    RT @RitaJKing: "Best practices," can sometimes be more accurately referred to as "widely accepted habits that foster stagnation."

Recently Bookmarked

    New in RSpec 3: Composable Matchers // 16 January
    Segregated DOM // 16 January
    How Should This Work? - An Object Design Epiphany // 16 January

Firsthand Web Development

370 Fairmount Avenue Quest,
Montréal, Québec
Canada H2V 2G4
Ph. 514-949-6869

© 2002-2014 Firsthand
All Rights Reserved
Nicholas Henry
Stay Connected

    Follow me on Twitter
    Read my blog
    Subscribe to my blog
    Connect via LinkedIn
    GitHub

Developing Ruby on Rails applications and custom Content Management Systems in Montréal. Contact Firsthand.

==========================================================
7.[] ; X.ruby - rspec commandline variable input - Stack Overflow
http://stackoverflow.com/questions/4609872/rspec-commandline-variable-input
ruby - rspec commandline variable input - Stack Overflow

==========================================================
1.[]ruby rspec INCLUDES mocks;  Use before(:each), not before(:all); much code is 2yrs ago; X.rspec/rspec-mocks
https://github.com/rspec/rspec-mocks
rspec/rspec-mocks
 RSpec Mocks Build Status Code Climate

rspec-mocks is a test-double framework for rspec with support for method stubs, fakes, and message expectations on generated test-doubles and real objects alike.
Install

gem install rspec       # for rspec-core, rspec-expectations, rspec-mocks
gem install rspec-mocks # for rspec-mocks only

Test Doubles

A test double is an object that stands in for another object in your system during a code example. Use the double method, passing in an optional identifier, to create one:

book = double("book")

Most of the time you will want some confidence that your doubles resemble an existing object in your system. Verifying doubles are provided for this purpose. If the existing object is available, they will prevent you from adding stubs and expectations for methods that do not exist or that have an invalid number of parameters.

book = instance_double("Book", :pages => 250)

Verifying doubles have some clever tricks to enable you to both test in isolation without your dependencies loaded while still being able to validate them against real objects. More detail is available in their documentation.
Method Stubs

A method stub is an implementation that returns a pre-determined value. Method stubs can be declared on test doubles or real objects using the same syntax. rspec-mocks supports 3 forms for declaring method stubs:

allow(book).to receive(:title) { "The RSpec Book" }
allow(book).to receive(:title).and_return("The RSpec Book")

You can also use this shortcut, which creates a test double and declares a method stub in one statement:

book = double("book", :title => "The RSpec Book")

The first argument is a name, which is used for documentation and appears in failure messages. If you don't care about the name, you can leave it out, making the combined instantiation/stub declaration very terse:

double(:foo => 'bar')

This is particularly nice when providing a list of test doubles to a method that iterates through them:

order.calculate_total_price(double(:price => 1.99), double(:price => 2.99))

Consecutive return values

When a stub might be invoked more than once, you can provide additional arguments to and_return. The invocations cycle through the list. The last value is returned for any subsequent invocations:

allow(die).to receive(:roll).and_return(1, 2, 3)
die.roll # => 1
die.roll # => 2
die.roll # => 3
die.roll # => 3
die.roll # => 3

To return an array in a single invocation, declare an array:

allow(team).to receive(:players).and_return([double(:name => "David")])

Message Expectations

A message expectation is an expectation that the test double will receive a message some time before the example ends. If the message is received, the expectation is satisfied. If not, the example fails.

validator = double("validator")
expect(validator).to receive(:validate) { "02134" }
zipcode = Zipcode.new("02134", validator)
zipcode.valid?

Test Spies

Verifies the given object received the expected message during the course of the test. The method must have previously been stubbed in order for messages to be verified.

Stubbing and verifying messages received in this way implements the Test Spy pattern.

  invitation = double('invitation', :accept => true)

  user.accept_invitation(invitation)

  expect(invitation).to have_received(:accept)

  # You can also use other common message expectations. For example:
  expect(invitation).to have_received(:accept).with(mailer)
  expect(invitation).to have_received(:accept).twice
  expect(invitation).to_not have_received(:accept).with(mailer)

Nomenclature
Mock Objects and Test Stubs

The names Mock Object and Test Stub suggest specialized Test Doubles. i.e. a Test Stub is a Test Double that only supports method stubs, and a Mock Object is a Test Double that supports message expectations and method stubs.

There is a lot of overlapping nomenclature here, and there are many variations of these patterns (fakes, spies, etc). Keep in mind that most of the time we're talking about method-level concepts that are variations of method stubs and message expectations, and we're applying to them to one generic kind of object: a Test Double.
Test-Specific Extension

a.k.a. Partial Double, a Test-Specific Extension is an extension of a real object in a system that is instrumented with test-double like behaviour in the context of a test. This technique is very common in Ruby because we often see class objects acting as global namespaces for methods. For example, in Rails:

person = double("person")
allow(Person).to receive(:find) { person }

In this case we're instrumenting Person to return the person object we've defined whenever it receives the find message. We can also set a message expectation so that the example fails if find is not called:

person = double("person")
expect(Person).to receive(:find) { person }

RSpec replaces the method we're stubbing or mocking with its own test-double-like method. At the end of the example, RSpec verifies any message expectations, and then restores the original methods.
Expecting Arguments

expect(double).to receive(:msg).with(*args)
expect(double).to_not receive(:msg).with(*args)

You can set multiple expectations for the same message if you need to:

expect(double).to receive(:msg).with("A", 1, 3)
expect(double).to receive(:msg).with("B", 2, 4)

Argument Matchers

Arguments that are passed to with are compared with actual arguments received using ==. In cases in which you want to specify things about the arguments rather than the arguments themselves, you can use any of the matchers that ship with rspec-expectations. They don't all make syntactic sense (they were primarily designed for use with RSpec::Expectations), but you are free to create your own custom RSpec::Matchers.

rspec-mocks also adds some keyword Symbols that you can use to specify certain kinds of arguments:

expect(double).to receive(:msg).with(no_args())
expect(double).to receive(:msg).with(any_args())
expect(double).to receive(:msg).with(1, kind_of(Numeric), "b") #2nd argument can be any kind of Numeric
expect(double).to receive(:msg).with(1, boolean(), "b") #2nd argument can be true or false
expect(double).to receive(:msg).with(1, /abc/, "b") #2nd argument can be any String matching the submitted Regexp
expect(double).to receive(:msg).with(1, anything(), "b") #2nd argument can be anything at all
expect(double).to receive(:msg).with(1, duck_type(:abs, :div), "b")
                    #2nd argument can be object that responds to #abs and #div

Receive Counts

expect(double).to receive(:msg).once
expect(double).to receive(:msg).twice
expect(double).to receive(:msg).exactly(n).times
expect(double).to receive(:msg).at_least(:once)
expect(double).to receive(:msg).at_least(:twice)
expect(double).to receive(:msg).at_least(n).times
expect(double).to receive(:msg).at_most(:once)
expect(double).to receive(:msg).at_most(:twice)
expect(double).to receive(:msg).at_most(n).times
expect(double).to receive(:msg).any_number_of_times

Ordering

expect(double).to receive(:msg).ordered
expect(double).to receive(:other_msg).ordered
  # This will fail if the messages are received out of order

This can include the same message with different arguments:

expect(double).to receive(:msg).with("A", 1, 3).ordered
expect(double).to receive(:msg).with("B", 2, 4).ordered

Setting Responses

Whether you are setting a message expectation or a method stub, you can tell the object precisely how to respond. The most generic way is to pass a block to receive:

expect(double).to receive(:msg) { value }

When the double receives the msg message, it evaluates the block and returns the result.

expect(double).to receive(:msg).and_return(value)
expect(double).to receive(:msg).exactly(3).times.and_return(value1, value2, value3)
  # returns value1 the first time, value2 the second, etc
expect(double).to receive(:msg).and_raise(error)
  # error can be an instantiated object or a class
  # if it is a class, it must be instantiable with no args
expect(double).to receive(:msg).and_throw(:msg)
expect(double).to receive(:msg).and_yield(values, to, yield)
expect(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)
  # for methods that yield to a block multiple times

Any of these responses can be applied to a stub as well

allow(double).to receive(:msg).and_return(value)
allow(double).to receive(:msg).and_return(value1, value2, value3)
allow(double).to receive(:msg).and_raise(error)
allow(double).to receive(:msg).and_throw(:msg)
allow(double).to receive(:msg).and_yield(values, to, yield)
allow(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)

Arbitrary Handling

Once in a while you'll find that the available expectations don't solve the particular problem you are trying to solve. Imagine that you expect the message to come with an Array argument that has a specific length, but you don't care what is in it. You could do this:

expect(double).to receive(:msg) do |arg|
  expect(arg.size).to eq 7
end

If the method being stubbed itself takes a block, and you need to yield to it in some special way, you can use this:

expect(double).to receive(:msg) do |&arg|
  begin
    arg.call
  ensure
    # cleanup
  end
end

Delegating to the Original Implementation

When working with a partial mock object, you may occasionally want to set a message expecation without interfering with how the object responds to the message. You can use and_call_original to achieve this:

expect(Person).to receive(:find).and_call_original
Person.find # => executes the original find method and returns the result

Combining Expectation Details

Combining the message name with specific arguments, receive counts and responses you can get quite a bit of detail in your expectations:

expect(double).to receive(:<<).with("illegal value").once.and_raise(ArgumentError)

While this is a good thing when you really need it, you probably don't really need it! Take care to specify only the things that matter to the behavior of your code.
Stubbing and Hiding Constants

See the mutating constants README for info on this feature.
Use before(:each), not before(:all)

Stubs in before(:all) are not supported. The reason is that all stubs and mocks get cleared out after each example, so any stub that is set in before(:all) would work in the first example that happens to run in that group, but not for any others.

Instead of before(:all), use before(:each).
Further Reading

There are many different viewpoints about the meaning of mocks and stubs. If you are interested in learning more, here is some recommended reading:

    Mock Objects: http://www.mockobjects.com/
    Endo-Testing: http://stalatest.googlecode.com/svn/trunk/Literatur/mockobjects.pdf
    Mock Roles, Not Objects: http://jmock.org/oopsla2004.pdf
    Test Double: http://www.martinfowler.com/bliki/TestDouble.html
    Test Double Patterns: http://xunitpatterns.com/Test%20Double%20Patterns.html
    Mocks aren't stubs: http://www.martinfowler.com/articles/mocksArentStubs.html

Also see

    http://github.com/rspec/rspec
    http://github.com/rspec/rspec-core
    http://github.com/rspec/rspec-expectations

==========================================================
1.[]Tip Best practice Ruby, any Chain calls that don't return same object type repeatedly; Can be mocked however ; X.Stub a chain of methods - Stubs - RSpec Mocks - RSpec - Relish
https://www.relishapp.com/rspec/rspec-mocks/v/2-2/docs/stubs/stub-a-chain-of-methods
Stub a chain of methods - Stubs - RSpec Mocks - RSpec - Relish
Stub a chain of methods

The stub_chain method lets you to stub a chain of methods in one statement.
Method chains are considered a design smell, but it's not really the method
chain that is the problem - it's the dependency chain represented by a chain
of messages to different objects:

foo.getbar.getbaz

This is a Law of Demeter violation if getbar() returns an object other than
foo, and getbaz() returns yet another object.

Fluent interfaces look similar from a caller's perspective, but don't
represent a dependency chain (the caller depends only on the object it is
calling). Consider this common example from Ruby on Rails:

Article.recent.by(current_user)

The recent() and by() methods return the same object, so this is not
a Law of Demeter violation.

Scenarios

    stub a chain of methods

        Given
            a file named "stub_chain_spec.rb" with:

            describe "stubbing a chain of methods" do
              subject { Object.new }

              context "given symbols representing methods" do
                it "returns the correct value" do
                  subject.stub_chain(:one, :two, :three).and_return(:four)
                  subject.one.two.three.should eq(:four)
                end
              end

              context "given a string of methods separated by dots" do
                it "returns the correct value" do
                  subject.stub_chain("one.two.three").and_return(:four)
                  subject.one.two.three.should eq(:four)
                end
              end
            end


==========================================================
1.[]ruby DEFN; Kernel#gets prompts and returns the line result, aka read next given file or nil at eof; EXTRA, can read paragraphs, DEFN double CR; EX. ARGV<<"afile"; print While gets => entire file is printed  ; X.Module: Kernel (Ruby 2.1.0)
http://ruby-doc.org/core-2.1.0/Kernel.html#method-i-gets
Module: Kernel (Ruby 2.1.0)
 gets(sep=$/) → string or nil click to toggle source
gets(limit) → string or nil
gets(sep,limit) → string or nil

Returns (and assigns to $_) the next line from the list of files in ARGV (or $*), or from standard input if no files are present on the command line. Returns nil at end of file. The optional argument specifies the record separator. The separator is included with the contents of each record. A separator of nil reads the entire contents, and a zero-length separator reads the input one paragraph at a time, where paragraphs are divided by two consecutive newlines. If the first argument is an integer, or optional second argument is given, the returning string would not be longer than the given value in bytes. If multiple filenames are present in ARGV, +gets(nil)+ will read the contents one file at a time.

ARGV << "testfile"
print while gets

produces:

This is line one
This is line two
This is line three
And so on...

The style of programming using $_ as an implicit parameter is gradually losing favor in the Ruby community.
==========================================================
1.[]ruby DEFN: String#chomp = new str without trailing \n, \n\r, \r and your specified suffix deleted, aka "record separator" ; X.Class: String (Ruby 2.0.0)
http://www.ruby-doc.org/core-2.0.0/String.html#method-i-chomp
Class: String (Ruby 2.0.0)

==========================================================
1.[]This version has require 'stringio' = not ok for the kata ; X.How do I write an RSpec test for a Ruby method that contains "gets.chomp"? - Stack Overflow
http://stackoverflow.com/questions/17258630/how-do-i-write-an-rspec-test-for-a-ruby-method-that-contains-gets-chomp
How do I write an RSpec test for a Ruby method that contains "gets.chomp"? - Stack Overflow
4 down vote accepted
	

You can stub out standard input stream like this:

require 'stringio'

def capture_name
  $stdin.gets.chomp
end

describe 'capture_name' do
  before do
    $stdin = StringIO.new("James T. Kirk\n")
  end

  after do
    $stdin = STDIN
  end

  it "should be 'James T. Kirk'" do
    expect(capture_name).to be == 'James T. Kirk'
  end
end

share|improve this answer
	
answered Jun 23 '13
==========================================================
1.[]TRY x.new.stub!(:gets) {"thing to type\n"} ; X.ruby - rspec commandline variable input - Stack Overflow
http://stackoverflow.com/questions/4609872/rspec-commandline-variable-input
ruby - rspec commandline variable input - Stack Overflow

rspec commandline variable input
I have a ruby script I'm trying to test with rspec. Is there a way to pass variables to the commandline (ie enter keyboard data via rspec to "gets")

Example:
username = gets.chomp

ruby rspec
share|improve this question
	
asked Jan 5 '11 at 22:31
djburdick
1,94821936
	add comment
1 Answer
active oldest votes
up vote 10 down vote accepted
	

You can stub Kernel#gets, except that it is mixed into the object, so stub it there:

class Mirror
  def echo
    print "enter something: "
    response = gets.chomp
    puts "#{response}"
  end
end

require 'rspec'

describe Mirror do
  it "should echo" do
    @mirror = Mirror.new
    @mirror.stub!(:gets) { "phrase\n" }
    @mirror.should_receive(:puts).with("phrase")
    @mirror.echo
  end
end

share|improve this answer
	
answered Jan 5 '11 at 23:16
zetetic
==========================================================
1.[]WIN bug, SO says use Linux; It was a locking problem -- not a permission problem. ; X.ruby - Errno::EACCES: Permission denied - ./tmp/rspec_guard_result - Stack Overflow
http://stackoverflow.com/questions/19608766/errnoeacces-permission-denied-tmp-rspec-guard-result
ruby - Errno::EACCES: Permission denied - ./tmp/rspec_guard_result - Stack Overflow

Errno::EACCES: Permission denied - ./tmp/rspec_guard_result
up vote 0 down vote favorite
	

Trying settup rspec-guard-spork for learning app from http://ruby.railstutorial.org/

Using Ruby 2.0, Rails 4.0 on Windows7 ( I know :( )

When starting guard, get:

23:02:51 - ERROR - Guard::RSpec failed to achieve its <run_on_modifications>, exception was:
> [#] Errno::EACCES: Permission denied - ./tmp/rspec_guard_result
...

All gemfile, guardfile etc are edited according tutorial. Except 1) deleting win32console gem from gemfile because it turned console-out into a crap and raised an error.

Permissions for a file is "F"(ull) for all cattegories:

D:\WebDevelop\sample_app>cacls tmp\rspec_guard_result D:\WebDevelop\sample_app\tmp\rspec_guard_result

    BUILTIN\Users:(ID)F
    NT AUTHORITY\Authenticated:(ID)F
    BUILTIN\Administrators:(ID)F
    NT AUTHORITY\system:(ID)F

What additional info should I provide here?
ruby rspec railstutorial.org guard
share|improve this question
	
asked Oct 26 '13 at 15:59
Evgeniy Gatsalov
183
	
	
One advice from my experience..you should restart with Linux..I have done the same mistake but then i realized it is not going to complete rather than you will encounter many of other errors which have no relation with Rails and every time you will wonder what has went wrong or do other people don't know the answer..Yes, indeed they don't know the answer to your question cause they never encountered such problem at Linux..so for you smooth learning of RailsTutorial please switch to Linux .thanks :) – Abhinay Oct 31 '13 at 2:34
	
I gues you are right. What Linux distributive would you advice for rails development? – Evgeniy Gatsalov Nov 1 '13 at 3:00
	
I think, probably the best one is Ubuntu , but you can go as per your choice and as i am working on Ubuntu and from system end i haven't faced any kind of errors yet, which you usually encounter on Windows. – Abhinay Nov 3 '13 at 5:56
	
One more thing , every time you encounter any issue don't just follow one answer on single post, you should check at-least 4 to 5 post @StackOverflow and after you read them all, decide your path. – Abhinay Nov 3 '13 at 5:58
	
Actually I always try to check as much sources as possible. But I cant find anything about this error. At all. So I writing now this comment from Ubuntu 12.10. Of course it came with another bunch of issues (e.g. Nvidia video drivers setup and much more) but it's wellknown problems and great community helps. I wish I could mark your comment as answer. Thx for ur help! – Evgeniy Gatsalov Nov 4 '13 at 7:48
	
I am glad that you switched to Ubuntu and you can see yourself that how much useful is this to use rails on Ubuntu and from here on whichever issue you are going to face, you'll surely get answers to those in StackOverflow..as 80% of RoR developer are using linux and answer to many of the know issues has been resolved already..all the very best :) – Abhinay Nov 4 '13 at 9:19
add comment
1 Answer
active oldest votes
up vote 1 down vote
	

This appears to be a locking problem -- not a permission problem. For me:

C:\Ruby19\lib\ruby\gems\1.9.1\gems\guard-rspec-4.0.3\lib\guard\rspec\inspector.rb line 51 in def _focused_path. The code tries to delete rspec_guard_result but can't because it's open. So ... close the file before it gets deleted.

update: as of 11/7/13, the fix is up on https://github.com/guard/guard-rspec (master branch)
share|improve this answer
	
edited Nov 7 '13 at 15:51 
===========================================================
.[]@start 10a; git RED

Date:   Thu Jan 16 22:31:19 2014 -050

    RED. Terminal idk how to truly put into rspec, fails now when before was ok to just see matches, also CLI works for start_prompt, though ugly, yet in rubymine fails.
===========================================================
.[]eacces permission error is; 
code :46  = ithValue = gets.chomp

Errno::EACCES: Permission denied - C:/amsrc/rmtry/spec/lib
./lib/terminal.rb:46:in `gets'
./lib/terminal.rb:46:in `gets'
./lib/terminal.rb:46:in `block in prompt_for_product'
./lib/terminal.rb:44:in `each'
./lib/terminal.rb:44:in `prompt_for_product'
./spec/lib/terminal_spec.rb:22:in `block (3 levels) in <top (required)>'
./spec/lib/terminal_spec.rb:55:in `call'
./spec/lib/terminal_spec.rb:55:in `block (2 levels) in <top (required)>'
./spec/lib/terminal_spec.rb:22:in `block (2 levels) in <top (required)>'


===========================================================
.[]
===========================================================
.[]
===========================================================
.[]WIP 150115w
===========================================================
.[]weird but correct.

Microsoft Windows [Version 6.3.9600]


irb(main):006:0> require './lib/terminal'
=> true
irb(main):007:0> Terminal::TerminalPos.new.start_prompt_loop
Hello from your POS Terminal Controller!
Welcome to the Admin Process of entering products and their prices.
 Please confirm to continue with 'y' for yes.
y
["Please enter the ", :id, ".\n"]a
["got value=", "a", "\n"]["Please enter the ", :price, ".\n"]1
["got value=", "1", "\n"]["Please enter the ", :batchPrice, ".\n"]2
["got value=", "2", "\n"]["Please enter the ", :numberForBatchDiscount, ".\n"]3
["got value=", "3", "\n"]["\n", "got ans=", "{:id=>\"a\", :price=>\"1\", :batchPrice=>\"2\", :numberForBatchDiscount=>\"3\"}", "\n"]Please confirm to continue with 'y' for yes.
y
["Please enter the ", :id, ".\n"]b
["got value=", "b", "\n"]["Please enter the ", :price, ".\n"]7
["got value=", "7", "\n"]["Please enter the ", :batchPrice, ".\n"]8
["got value=", "8", "\n"]["Please enter the ", :numberForBatchDiscount, ".\n"]9
["got value=", "9", "\n"]["\n", "got ans=", "{:id=>\"b\", :price=>\"7\", :batchPrice=>\"8\", :numberForBatchDiscount=>\"9\"}", "\n"]Please confirm to continue with 'y' for yes.
n
["Thank you for entering the price list. It is; \n", "[{:id=>\"a\", :price=>\"1\", :batchPrice=>\"2\", :numberForBatchDiscount=>\"3\"}, {:id=>\"b\", :price=>\"7\", :batchPrice=>\"8\", :numberForBatchDiscount=>\"9\"}]", "\n"]=> nil
irb(main):008:0>
===========================================================
.[]CLI TODO

[]using print always never puts

[]needs a require format template?? puts("Please enter the #{ithKey}.\n")

=begin

[]TODO
[]readline does not work? there is also a readline gnu package that can be require'd
[]io package for $SYSIN etc not working?
#require 'io'
#$sysout.
#$sysout.print('please enter x')
a= readline('x',1)# separator, limit
#a= $sysin.readline('x',1)# separator, limit
#$sysout.


$i = 0
$num = 5
begin
   puts("Inside the loop i = #$i" )
   $i +=1;
end until $i > $num
=end
===========================================================
.[]Ruby-tip; easy CLI to avoid  sentinel token to appear upon ready to complete

    # NOT using the seen methods on stackoverflow;
    #@outs+[
    # readline(' ',5)
	
http://www.howtogeek.com/howto/programming/ruby/ruby-if-else-if-command-syntax/	
	If Else If Syntax

Here’s the key difference between Ruby and most other languages. Note that “else if” is actually spelled “elsif” without the e.

    if var == 10
       print “Variable is 10″
    elsif var == “20″
       print “Variable is 20″
    else
       print “Variable is something else”
    end

	
	
http://stackoverflow.com/questions/7534905/how-can-i-fix-this-ruby-yes-no-style-loop
 8 down vote accepted
	

Possible problems:

    check Game.play
    Capital/no-capital in the answer? -> String#upcase or String#downcase
    hidden spaces (before/after the answer) -> String#strip instead String#chomp

You may also use regular expressions (example N) or with a list of answers (yes) to check the answer:

def play_again?
  while true
    print "Would you like to play again? [y/n]: "
    case gets.strip
      when 'Y', 'y', 'j', 'J', 'yes' #j for Germans (Ja)
        puts 'I play' # Game.play
      when /\A[nN]o?\Z/ #n or no
        break 
    end
  end
end

play_again?


==========================================================
1.[]No prompting, only using the optparse to get args, like unix; shows how to test etc ; X.Issue 2.9: Building Unix-style command line applications - Practicing Ruby
https://practicingruby.com/articles/building-unix-style-command-line-applications?u=dc2ab0f9bb
Issue 2.9: Building Unix-style command line applications - Practicing Ruby

==========================================================
2.[]TODO THT that readline was also in IO? this is GNU; looks nice ; X.Ruby Readline
http://bogojoker.com/readline/
Ruby Readline

==========================================================
3.[] ; X.ruby - How can I chomp every line in an array at once? - Stack Overflow
http://stackoverflow.com/questions/3750631/how-can-i-chomp-every-line-in-an-array-at-once
ruby - How can I chomp every line in an array at once? - Stack Overflow
 10 down vote accepted
	

IO.popen("Generate a list of files").readlines.map(&:chomp)



===========================================================
.[]
===========================================================
.[]
===========================================================
.[]URLS-LIST
==========================================================
1.[] ; X.Have Ruby on Rails Installed on Windows the Best Way | My Journy to Become a Ruby on Rails Developer
http://igotrailed.wordpress.com/2013/01/31/have-ruby-on-rails-installed-on-windows-the-best-way/
Have Ruby on Rails Installed on Windows the Best Way | My Journy to Become a Ruby on Rails Developer


31Jan / 2013
Have Ruby on Rails Installed on Windows the Best Way

This is a complete step by step instructions with minimal explanations, on how to set up your Windows machine for starting building your RoR application in the most efficient and professional way.

Most of this is inspired from the Michael Hurtl most recommended Rails book 

1. Download and install RailsInsaller

2. Download and install Console 2

3. Download and install Sublime Text 2

4. Download and install Herkou Toolbelt

5. Open Console 2

6. Navigate through cd commands to a folder where you want your app folder to be created

7. Run rails new applicationname (will create the application directory with all rails default sub-directories and files)

8. Open gemfile with Sublime Text 2 and change as per your required gems. I found the gemfile used by Rails tutorial book is perfect to use in every application, then add gems when you need later. But make sure you:
  – remove rb-fsevent, growl, rb-inotify, libontify
  – add 

gem ‘rb-fchange’, ’0.0.5′
gem ‘rb-notifu’, ’0.0.4′
gem ‘win32console’, ’1.3.0′

Google the pages of these gems to check their latest version and change the version number accordingly

9. Navigate with Console 2 to your newly created app folder and run bundle install

10. Run rails s

Congratulations you now have rails server running with some beautiful essential gems.

11. git init

12. git add .

13. git commit -m “Initial commit”

14. Create git account on github

15. git remote add origin https://github.com/%5Busernane%5D/%5Brepositaryname%5D.git

16. git push -u origin master

Congratulations you have just set up Git to work smoothly with your app.

17. Create a heroku account

18. Run heroku login on console 2

19. heroku create

20. git push heroku master

Congratulations you have hosted your app on Heroku.

The most recommended testing environment is rspec, and here is the best way to install it with the best supporting gems and options.

21. In console 2, run rails generate rspec:install

22. bundle exec guard init rspec (guard gem for autotesting)

23. change content of guardfile to the one used in the tutorial

24. bundle exec spork –bootstrap (spork gem for speeding up tests)

25. Change content of spec/spec_helper.rb to the one used in the tutorial

26. Change content of .rspec file to 

--colour
--drb

27. bundle exec guard init spork (to tell rails to use spork with guard)

28. add :cli => ‘–drb’ argument to guard ‘rspec’ line in guardfile

29. In sublime text 2 go to preference -> Package Control and select install package find  rubytest and have it installed.

30. preference -> Package Settings->RubyTest->Settings – User add bundle exec before any rspec you find

Congratulations you now have rspec testing framewrok installed with the best supporting gems to autotest, notify, and speed things up. You can also now run tests from Sublime Text 2 itself.

In thirty steps you now have everything ready for the best development environment on Windows for any serious application development.

==========================================================
2.[] ; X.Sublime Text - Download
http://www.sublimetext.com/3
Sublime Text - Download

==========================================================
3.[] ; X.Heroku Toolbelt
https://toolbelt.heroku.com/
Heroku Toolbelt

==========================================================
4.[]WIN TERMINAL app, don't think it worked either ; X.Console | Free software downloads at SourceForge.net
http://sourceforge.net/projects/console/
Console | Free software downloads at SourceForge.net

==========================================================
6.[] ; X.ruby on rails 3 - Getting Rspec + autotest working on windows - Stack Overflow
http://stackoverflow.com/questions/3852143/getting-rspec-autotest-working-on-windows
ruby on rails 3 - Getting Rspec + autotest working on windows - Stack Overflow

Getting Rspec + autotest working on windows
up vote 5 down vote favorite
	

I have installed growl + rspec + autotest on my windows 7 machine. From the command prompt, when I type 'rspec spec/' it doesn't work. The tests will only run if I use 'rake spec/' + 'autotest'.

Also, I am running these tests: http://railstutorial.org/chapters/static-pages#code:default_pages_controller_spec (i.e. very, very trivial) and they are taking 8.11 seconds.

They also fail when I run them - even though they don't in the example. I have done everything the tutorial told me, the problem is the tutorial doesn't go too deep into installing rspec on a Windows machine. It gives a link, but even then you have to kinda piece the instructions together.

The errors I get are 'Failure/Error: Unable to find C to read failed line [31mundefined methord get' for #<RSpec::Core::ExampleGroup::Nested_1::Nested_1:0x48336c0>'

The second error is very similar to that.

I have also installed Growl correctly, because I get a notification that there were two failures.

Can anyone help me?
windows-7 ruby-on-rails-3 rspec
share|improve this question
	
asked Oct 4 '10 at 0:28
marcamillion
3,9561258131
	
	 
	
marcamillion, when you get a chance, could you comment with the exact versions of ruby, rails, rspec and autotest that you see this problem with? I'm going to try to reproduce it with the latest stable of each of these, but just in case I'd like to know your versions. –  carols10cents Jan 13 '11 at 0:51
add comment
4 Answers
active oldest votes
up vote 2 down vote
	

I did a little googling, and according to this thread on the rspec ruby forum and this closed rspec-rails issue, this is an issue with rspec-rails that has been fixed.

I am running Ruby 1.9.2p136 on Windows 7 using rails 3.0.3.

This is what my Gemfile looked like, which shows the versions of rspec and rspec-rails that I was using:

source 'http://rubygems.org'

gem 'rails', '3.0.3'
gem 'sqlite3-ruby', :require => 'sqlite3'

group :development do
  gem 'rspec-rails', '2.4.1'
end

group :test do
  gem 'rspec', '2.4.0'
  gem 'webrat', '0.7.1'
end

I say "lookED like" because when I tried to run the rspec rails generator, this is what I got:

C:\Ruby\sample_app>rails generate rspec:install
  create  .rspec
  create  spec
  create  spec/spec_helper.rb
Could not find "autotest" in any of your source paths. Your current source paths
 are:
C:/Ruby/sample_app/lib/templates/rspec/install
C:/Ruby/192-stackoverflow/lib/ruby/gems/1.9.1/gems/rspec-rails-2.3.0/lib/generators/rspec/install/templates

So then I added autotest to my Gemfile (and did bundle install again), then tried rails generate rspec:install again and it worked with no errors. So this is what my Gemfile looks like now:

source 'http://rubygems.org'

gem 'rails', '3.0.3'
gem 'sqlite3-ruby', :require => 'sqlite3'

group :development do
  gem 'autotest'
  gem 'rspec-rails', '2.4.1'
end

group :test do
  gem 'rspec', '2.4.0'
  gem 'webrat', '0.7.1'
end

And the version of autotest that this installs is 4.4.6:

C:\Ruby\sample_app>bundle show autotest
C:/Ruby/192-stackoverflow/lib/ruby/gems/1.9.1/gems/autotest-4.4.6

I then created the controller as instructed in the tutorial:

$ rails generate controller Pages home contact

And I was able to run both "bundle exec autotest" and "rspec spec/" without getting the error you are seeing:

C:\Ruby\sample_app>bundle exec autotest
loading autotest/rspec2
bundle exec C:\Ruby\192-stackoverflow\bin\ruby -S C:/Ruby/192-stackoverflow/lib/ruby/gems/1.9.1/gems/rspec-core-2.4.0/bin/rspec --tty 'C:/Ruby/sample_app/spec/controllers/pages_controller_spec.rb'
..

Finished in 23.04 seconds
2 examples, 0 failures
# I killed autotest with CTRL-c at this point
Interrupt a second time to quit
Terminate batch job (Y/N)? y
Terminate batch job (Y/N)? y


C:\Ruby\sample_app>rspec spec/
..

Finished in 23.11 seconds
2 examples, 0 failures

I also continued on with the tutorial, writing specs for the About page, while autotest was running and it was running on my changes without any problems.

So please try:

    Updating your Gemspec to look similar to my 2nd one posted here
    Running 'bundle install'
    Running 'bundle exec autotest'

and let me know if that works. I will be checking back!
share|improve this answer
	
edited Jan 13 '11 at 14:10

	
answered Jan 13 '11 at 3:16
carols10cents
3,24831435
	add comment
up vote 1 down vote
	

I've not found a permanent fix that works yet, but apparently it boils down to a path issue - something is munging the windows path and it breaks. However, there's a work around:

Within your describe, before the 'get' call, put this:

include RSpec::Rails::ControllerExampleGroup

Here's sample code using a generated Rails spec for a controller. Note that it's at the beginning of the scope:

require 'spec_helper'

describe PagesController do
  include RSpec::Rails::ControllerExampleGroup

  describe "GET 'home'" do
    it "should be successful" do
      get 'home'
      response.should be_success
    end
  end

  describe "GET 'contact'" do
    it "should be successful" do
      get 'contact'
      response.should be_success
    end
  end

end

There's a fix I've seen that suggests a change to spec_helper (in the Rails case), but I couldn't get it to work.

EDIT: A bit more research reveals this is a problem with autospec - this work around will work if you're just using rspec, but will not work with autotest. I've not been able to find a solution for this, however.
share|improve this answer
	
edited Oct 4 '10 at 15:02

	
answered Oct 4 '10 at 14:25
tsalaroth
477
	
	 
	
Yeh...I am using autotest :( –  marcamillion Oct 4 '10 at 18:12
add comment
up vote 1 down vote
	

I thought that this might help those who might be having trouble now that all the gems have been updated quite a bit (especially for those using Ruby on Rails 3 tutorial):

I was able to get this working using the latest versions of all gems:

My Gemfile:

source 'https://rubygems.org'

gem 'rails', '3.2.6'
gem 'jquery-rails'

gem 'sqlite3', :group => [:development, :test]
gem 'pg', :group => :production #This is so Heroku will work

group :development do
  gem 'rspec-rails'
end

group :test do
  gem 'rspec'
  gem 'webrat'
  gem 'spork-rails'  #Use this is only if you want to use spork
end

Make sure you clean up rspec if you've already got an older version (by using the Ruby on Rails 3 tutorial, for example): http://stackoverflow.com/a/4433217/911133

To use autotest follow the directions here: https://github.com/svoop/autotest-growl

Note that installing growl-for-windows is part of that deal and snarl is not needed: http://www.growlforwindows.com/

Your .autotest file can be in one of two places

1) your HOME directory, which is (example):

C:\users\joeblow\.autotest

2) the rails application root (this will then operate for that app only)

my .autotest file looks like this:

require 'autotest/growl'
require 'autotest/restart'
require 'autotest/timestamp'

Autotest.add_hook :initialize do |autotest|
  autotest.add_mapping(%r%^spec/(requrests)/.*rb$%) do
|filename, _|
filename
end
end

Autotest::Growl::clear_terminal = false

Make sure you've done a 'bundle install'

Then run Growl for windows (start menu or start on windows boot)

run autotest in the command line and you should be good to go!

c:\users\joeblow\workspace\Rails\MyRailsProject> autotest

share|improve this answer
	
edited Jul 27 '12 at 21:31

	
answered Jul 27 '12 at 15:41
Philip J Lorenz
112
	add comment
up vote 0 down vote
	

If someone wrote a blog post with very detailed instructions on how to do this it would probably be pretty popular. Somebody write it pleeeease.
share|improve this answer
	
answered Dec 30 '10 at 13:11
Spencer Cooley
9521824
	add comment
==========================================================
7.[]BOOK GREAT ; X.Learn Web Development with the Ruby on Rails Tutorial | Static Pages
http://ruby.railstutorial.org/chapters/static-pages#code:default_pages_controller_spec
Learn Web Development with the Ruby on Rails Tutorial | Static Pages

==========================================================
8.[] ; X.importeroo/spec/importeroo/importer_spec.rb at master · AnneTheAgile/importeroo
https://github.com/AnneTheAgile/importeroo/blob/master/spec/importeroo/importer_spec.rb
importeroo/spec/importeroo/importer_spec.rb at master · AnneTheAgile/importeroo

==========================================================
12.[] ; X.ruby2-rails4-bootstrap-heroku/spec at master · diowa/ruby2-rails4-bootstrap-heroku
https://github.com/diowa/ruby2-rails4-bootstrap-heroku/tree/master/spec
ruby2-rails4-bootstrap-heroku/spec at master · diowa/ruby2-rails4-bootstrap-heroku

==========================================================
13.[] ; X.Install gems on Windows 7 / Problems / Discussion Area - RubyGems.org Support
http://help.rubygems.org/discussions/problems/333-install-gems-on-windows-7
Install gems on Windows 7 / Problems / Discussion Area - RubyGems.org Support
 Posted by Luis Lavena on May 18, 2011 @ 02:08 PM
Luis Lavena's Avatar

Please, either Jim Bates or Onno, provide the complete output of your gem install command adding --debug -V options to it.

E.g. If the command was gem install rails then the full command will be gem install rails --debug -V

Use Pastie.org or gist.github.com to upload the full output and we will be able to help you better.

==========================================================
15.[] ; X.notepad++ drag and drop text windows 8 - Google Search
https://www.google.com/search?q=notepad%2B%2B&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a#q=notepad%2B%2B+drag+and+drop+text+windows+8&rls=org.mozilla:en-US:official
notepad++ drag and drop text windows 8 - Google Search

==========================================================
16.[] ; X.Installing Ruby on Rails on windows - Stack Overflow
http://stackoverflow.com/questions/4853222/installing-ruby-on-rails-on-windows
Installing Ruby on Rails on windows - Stack Overflow
 4 down vote accepted
	

On Windows you need to set your system PATH variable (My Computer -> Properties -> Advanced -> Environment Variables -> System variables)

Append the PATH Variable value:: c:\ruby\bin;

==========================================================
17.[]This is the official documentation site for RSpec-2.  ; X.Publisher: RSpec - Relish
https://www.relishapp.com/rspec
Publisher: RSpec - Relish

==========================================================
18.[] ; X.RSpec's new message expectation syntax
http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
RSpec's new message expectation syntax

RSpec's new message expectation syntax
27 May 2013

We've developed a new syntax for message expectations in RSpec, which brings message expectations in line with the new expect syntax for state based expectations. This change required us to make a number of internal refactorings, so we're cutting a release candidate of RSpec, 2.14rc1, so that early adopters can try this new feature out. We encourage you to try out the release candidate and report any issues to https://github.com/rspec/rspec-mocks/issues.

In 2.14rc1 both the new syntax and old syntax are enabled by default. This is in line with state based expectations, where both syntaxes are also enabled by default.

With the old syntax message expectations were set like this:

foo.should_receive(:bar)
foo.should_receive(:bar).with(:buzz)
foo.should_receive(:bar).exactly(3).times

The new syntax for message expectations looks like this:

expect(foo).to receive(:bar)
expect(foo).to receive(:bar).with(:buzz)
expect(foo).to receive(:bar).exactly(3).times

This syntax also adds new ways to stub methods. Previously you may have stubbed like this:

d = double(:message1 => true)
d.stub(:message2).and_return(:value)
real_object.stub(:message).and_return(:value)

You can now stub like this:

d = double(:message1 => true)
allow(d).to receive(:message2).and_return(:value)
allow(real_object).to receive(:message).and_return(:value)

If you want to configure which syntaxes are enabled you can do so as follows (see your spec_helper.rb file):

RSpec.configure do |configuration|
  configuration.mock_with :rspec do |configuration|
    configuration.syntax = [:expect, :should]
    #configuration.syntax = :should
    #configuration.syntax = :expect
  end
end

Myron's post explains why using the expect syntax is preferable to the should syntax in some cases. The problem here is that the :should syntax that RSpec uses can fail in the case of proxy objects, and objects that include the delegate module. Essentially it requires that we define methods on every object in the system. Not owning every object means that we cannot ensure this works in a consistent manner. The expect syntax gets around this problem by not relying on RSpec specific methods being defined on every object in the system.

We think that the new :expect syntax for message expectations is an improvement, and that you should try it in your fresh and existing spec suites. You can get the new syntax by upgrading to RSpec 2.14rc1, and we encourage you to do so.

==========================================================
39.[] ; X.Module: Spec::Matchers
http://rspec.rubyforge.org/rspec/1.1.11/classes/Spec/Matchers.html
Module: Spec::Matchers

==========================================================
40.[]CLI app they say use a variable special to capture, but i made a custom matcher instead ; X.ruby - Can I use RSpec to mock stdin/stdout to test console reads & writes? - Stack Overflow
http://stackoverflow.com/questions/6335282/can-i-use-rspec-to-mock-stdin-stdout-to-test-console-reads-writes
ruby - Can I use RSpec to mock stdin/stdout to test console reads & writes? - Stack Overflow
 11 down vote accepted
	

You can use mocks and have the method called more than once by listing multiple values in the and_return() method. These will be returned, one on each call, in the order given.

STDIN.should_receive(:read).and_return("Your string")

STDIN.should_receive(:read).and_return("value1", "value2", "value3")

You can do similar things with STDOUT:

STDOUT.should_receive(:puts).with("string")

See the RSpec mocking documentation for more information.

==========================================================
41.[]Rspec-tip; Do NOT over-constrain your code ; X.Everything that is wrong with mocking, bdd, and rspec
http://ngauthier.com/2010/12/everything-that-is-wrong-with-mocking.html
Everything that is wrong with mocking, bdd, and rspec

==========================================================
42.[]LIST OF WINDOWS TERMINAL items ; X.Making a better, somewhat prettier, but definitely more functional Windows Command Line - Scott Hanselman
http://www.hanselman.com/blog/MakingABetterSomewhatPrettierButDefinitelyMoreFunctionalWindowsCommandLine.aspx

Making a better, somewhat prettier, but definitely more functional Windows Command Line
July 16, '13 Comments [58] Posted in Tools
Running htop via ssh under ConEmu
 

I've blogged before, in fact in 2004, (!) that Windows is missing the text mode boat. There is a massive opportunity for a great, nay, awesome and pretty, command line on Windows. If someone cracks this problem, they're gonna be heroes.

I love iTerm2 and its tabs, its font handling, its simple elegance. I want this on Windows. In 2011 I found Console2, and then in 2012 I moved to ConEmu, a great tabbed terminal for Windows. Even then, it's not "pretty." I love these guys, and the ConEmu is truly an amazing and configurable piece of software, but it was written by developers for developers. I have to change the fonts to Consolas for the main font and Segoe UI for the rest to make it tolerable. Am I being petty and focusing on looks? Absolutely. Gorgeous and functional software is why Mac companies like Panic exist. They make things that are pretty AND functional. Windows folks could definitely "lovingly design" stuff more.

Here's some command line utilities that augment and help - but don't yet complete save - the Windows Command Line.
Clink

I just learned about Clink and I'm hooked. It's hooked as well, directly into your cmd.exe window! *rimshot*

We all know that there's Cygwin for a bash-like experience in Windows, but Click is a small utility that brings some of those productivity and editing features into cmd.exe directly!

    Bash-like line editing from GNU's Readline library. Read more on Readline's keyboard shortcuts.
    Better path completion (TAB).
    Paste from clipboard (Ctrl-V). Oh yes.
    Support for the completion of executables/commands, and environment variables.
    Undo/Redo (Ctrl-_ or Ctrl-X, Ctrl-U)
    Improved command line history.
        Persists across sessions.
        Searchable (Ctrl-R and Ctrl-S).
        History expansion (e.g. !!, !, and !$).

The most significant change that Clink makes is to Tab Completion, moving to a more Bash-y "show them the choices" mode rather than the DOS-like "make them cycle through everything." Here I've pressed TAB over 2013-0 and Clink is showing me what I can choose from.

using Clink to make cmd.exe better
PowerShell ISE

Surprise! You already have this on your Windows computer. Ya, it freaked me out also. You can even hide the script pane if you want (Ctrl-R) and just use PowerShell ISE as a console! You get auto completion (see the Directory intellisense below), coloring, aliases and all the power of PowerShell.

Sure, it's not bash, but that may be a good thing. You may not have been exposed to PowerShell and the prospect may frighten you, but try it for a bit. They've aliased the obvious commands "ls" does what you'd expect as does "dir." Moving around will feel like any command prompt.

Not to mention if you are using PowerShell you already get a full debugger experience.

The PowerShell ISE

It won't win any awards for good looks (again, I come back to the importance of fonts, whitespace, and good typography...get a designer) but it is extremely functional and you already have it!
ConEmu lets you put your consoles in JumpLists!ConEmu

I've talked about ConEmu before, but I'll bring some of that over here. ConEmu takes your command prompt and adds tabs, status bar details, admin tabs, freakin' taskbar progress bars on copies (which is hot), and deep support for FarManager (Norton Commander anyone?)

Tabs in ConEmu in Windows

ConEmu is definitely a huge jump for console usability on Windows. The feature that really blew me away was Progress Bar integration. If you're familiar with Windows 7 you are likely familiar with the way that progress bars are overlaid over a Windows 7 Taskbar button. ConEmu looks at the current application running and some heuristics and overlays progress. Madness. Do a chkdsk and watch the progress bar. Love this little detail.

ConEmu Progress Bar
Git for Windows or Cygwin

If you want a Linux-like experience on Windows with a nice shell, Cygwin has long been a choice. However, since the release of Git for Windows most folks I know just install it and use the Git Bash. If you get Cygwin proper you'll get a much more complete "fake Linux" through their very competent set of command line tools, but for most, Git Bash will suffice.

Git Bash gets you close

What about SSHing? That's a fundamental part of command-line life for folks connecting to remote Unix machines. For me, I have a Linux farm I run on Azure that I often need to ssh into.

    Random: I like to say I 'shoosh' into the machines, but folks keep looking at me weird. I thought this was a thing?

However, the SSH clients for Windows suck. Ok, they don't suck, but they are ugly. It's scandalous how ugly. Mad respect to PuTTY for being awesome and super functional, but it's like running Windows 95 in a window every time I launch it. Here's some better SSH clients, including a fork of PuTTY itself.
Bitvise SSH Client - more importantly, SSH from the command line

The Bitvise SSH Client is free for personal use and works great. There's a whole GUI, and, bless them, it's not pretty. However! There's also a command line version which is the REAL treasure. I just want to type ssh and be on my way.

In fact, I made a batch file called "ssh.bat" and put it in my PATH that just has this inside: "stermc %1" this means I can just type ssh user@hostname:port and be on my way. This is, for me, WAY easier than putty for most things. Bitcise is definitely worth checking out.

Find a SSH command line too like Bitvise
Kitty

Kitty is a fork of version 0.62 of the original PuTTY. There's also a portable version that I've put in my Dropbox utils folder (which is in my PATH) so it's on every machine I have automatically. Kitty has some nice features like Send to Tray, transparency, session launching (so you don't need Pageant), and lots of little poweruser features like "rolling up" the app if you Ctrl-Click on the Title Bar.

Kitty is a better PuTTY alternative

Kitty also can integrate into your browser to handle ssh:// links, which is a nice touch.

What console app improvers have I missed? What do you use on Windows? Sound off in the comments.

==========================================================
43.[]Clink WIN SW did NOT work well, forget why, 140115 ; X.clink_0.4_setup.exe - clink - clink v0.4 installer - Bringing Bash's powerful command line editing to Microsoft Windows' cmd.exe - Google Project Hosting
https://code.google.com/p/clink/downloads/detail?name=clink_0.4_setup.exe&can=2&q=
clink_0.4_setup.exe - clink - clink v0.4 installer - Bringing Bash's powerful command line editing to Microsoft Windows' cmd.exe - Google Project Hosting
Making a better, somewhat prettier, but definitely more functional Windows Command Line - Scott Hanselman
 clink
Bringing Bash's powerful command line editing to Microsoft Windows' cmd.exe 

==========================================================
44.[]DONE, so easy :) ; X.Writing Custom RSpec Matchers - Timothy's Blog
http://blog.timothyandrew.net/blog/2013/05/01/writing-custom-rspec-matchers/

Writing Custom RSpec Matchers

May 1st, 2013

RSpec matchers let you abstract away common assertions in your test code.

For example, we recently had a spec file with a bunch of lines that looked like this:

1

	

worksheet.rows[0].cells.map(&:value).should include "Foo"

Which tests if the excel file we’re generating (using axlsx) includes Foo in the header row.

That isn’t very neat. What if we replace it with this?

1

	

worksheet.should have_header_cell "Foo"

That looks a lot better. We can implement this kind of abstraction using custom RSpec matchers.

The matcher for this is as simple as:

1
2
3
4
5

	

RSpec::Matchers.define :have_header_cell do |cell_value|
  match do |worksheet|
    worksheet.rows[0].cells.map(&:value).include? cell_value
  end
end

RSpec passes in the expected and actual values to these blocks, and our code has to return a boolean representing the result of the assertion.

Now what about assertions that look like this?

1
2
3

	

worksheet.rows[1].cells.map(&:value).should include "Foo"
worksheet.rows[2].cells.map(&:value).should include "Bar"
worksheet.rows[3].cells.map(&:value).should include "Baz"

The row that we’re checking changes for each assertion. Of course, we could create a different matcher for each of these cases, but there’s a better way.

1
2
3

	

worksheet.should have_cell("Foo").in_row 1
worksheet.should have_cell("Bar").in_row 2
worksheet.should have_cell("Baz").in_row 3

RSpec lets you chain custom matchers.

1
2
3
4
5
6
7
8
9
10
11
12
13

	

RSpec::Matchers.define :have_cell do |expected|
  match do |worksheet|
    worksheet.rows[@index].cells.map(&:value).include? expected
  end

  chain :in_row do |index|
    @index = index
  end

  failure_message_for_should do |actual|
    "Expected #{actual} to include #{expected} at row #{@index}."
  end
end

We first store the argument passed in to in_row as an instance variable, and then access it in the main have_cell matcher.

The example also includes a custom error message handler, which properly formats an error message if the assertion fails.

==========================================================
45.[] ; X.solnic.eu
http://solnic.eu/2011/01/14/custom-rspec-2-matchers.html
solnic.eu

Writing Custom RSpec Matchers - Timothy's Blog
Custom RSpec-2 Matchers
Posted by solnic on Jan 14 2011

RSpec is one of my favorite tools. I have literally fallen in love with this fantastic BDD library, especially with its second version. While using RSpec I realized it teaches me how to write tests. Yes, exactly - learning RSpec DSL, its syntax and structure of spec examples you actually learn the best practices in writing tests. RSpec, despite many built-in matchers, comes with a DSL for defining your own, custom matchers. It’s so easy that you’re not gonna believe this.
Basics

In RSpec matchers are nothing but methods available in the context of an example. You use them to make sure that a given expectation is met. There are many matchers that come with RSpec for instance here is how you can use the respond_to matcher:

describe String do
  it { should respond_to(:gsub) }
end

It’s so clean and beautiful that I probably don’t have to explain what this piece of code does, right?

Tip: When you call describe with a class as an argument, RSpec will automatically create an instance of that class and make it available via subject method. Subject is also the default context of an example block. That’s why we don’t have to write “subject.should respond_to(:gsub)”, because by default “should” or “should_not” is called on the subject.

Alright, for a list of available matchers check out the official docs. Let’s focus on writing our own matchers. If you’re wondering why you would need to do that, let me show a simple example of a User model spec:

describe User do
  before { subject.email = "foobar" }

  it "should have errors on email" do
    subject.errors.should have_key(:email)
  end

  it "should have correct error message" do
    subject.errors[:email].should include("Email is invalid")
  end
end

Now, you probably can imagine that almost identical code could be used in many other cases for many other model classes. Those 6 lines of code can be written as 1. You just need a custom matcher.

Defining a custom matcher is simple. Let’s start with a basic one that checks if a given model instance has validation errors:

RSpec::Matchers.define :have_errors_on do |attribute|
  match do |model|
    model.valid? # call it here so we don’t have to write it in before blocks
    model.errors.key?(attribute)
  end
end

And we can use it like that:

describe User do
  before { subject.email = "foobar" }

  it { should have_errors_on(:email) }
end

It covers only the first expectation, but it’s a good starting point.
Chaining

The second expectation in the example is to see if the correct validation error message is set. It’s possible to run matchers in a chain so let’s see how we can implement chaining in our custom matcher:

RSpec::Matchers.define :have_errors_on do |attribute|
  chain :with_message do |message|
    @message = message
  end

  match do |model|
    model.valid?

    @has_errors = model.errors.key?(attribute)

    if @message
      @has_errors && model.errors[attribute].include?(@message)
    else
      @has_errors
    end
  end
end

It’s really that simple. Now the matcher checks two things and returns true only if the message exists and if it matches the expected one.

Let’s use it:

describe User do
  before { subject.email = "foobar" }

  it { should have_errors_on(:email).with_message("Email has an invalid format") }
end

Nice! One line instead of six. But that’s not everything, with a failing spec failure messages might look like that:

F

Failures:

  1) User when email is not valid
     Failure/Error: it { should have_errors_on(:email).with_message("Email has an invali format") }
       expected #<user @id=nil @email="foobar"> to have errors on :email

Finished in 0.00047 seconds
1 examples, 1 failure

It’s automatically generated by RSpec based on the matcher name. It’s ok, but notice that it won’t tell us if the error message was incorrect. That’s why we need to set custom failure messages.
Custom failure messages and it’s done!

It is really recommended to use meaningful failure messages. We need to set 2 types of them, first one for “should” and second one for “should_not” expectations. The idea is that if there is an error and the message is not correct, we need to show that information in the failure output.

So, our complete matcher looks like that:

RSpec::Matchers.define :have_errors_on do |attribute|
  chain :with_message do |message|
    @message = message
  end

  match do |model|
    model.valid?

    @has_errors = model.errors.key?(attribute)

    if @message
      @has_errors && model.errors[attribute].include?(@message)
    else
      @has_errors
    end
  end

  failure_message_for_should do |model|
    if @message
      "Validation errors #{model.errors[attribute].inspect} should include #{@message.inspect}"
    else
      "#{model.class} should have errors on attribute #{attribute.inspect}"
    end
  end

  failure_message_for_should_not do |model|
    "#{model.class} should not have an error on attribute #{attribute.inspect}"
  end
end

Now if we run our example and it fails because an error message doesn’t match the expectation, we will get following failure message in the output:

F

Failures:

  1) User
     Failure/Error: it { should have_errors_on(:email).with_message("Email has an invalid format") }
       Validation errors ["Email is blah"] should include "Email has an invalid format"
     # ./_examples/rspec2_matchers.rb:55:in `block (2 levels) in <top (required)>’

Finished in 0.00053 seconds
1 example, 1 failure

Summing up

As you can see implementing custom RSpec matchers is easy trivial and it’s a highly recommended practice. There are plenty of use cases where you want to write custom matchers. It makes your specs clean and even more readable and what’s most important it keeps your spec’s code DRY and extendable.

Here are some resources if you want to learn more:

    Official RSpec wiki on Github
    RSpec Docs
    David Chelimsky Blog
    RSpec matchers screencast
    A Rails Demo with posts about RSpec


==========================================================
46.[] ; X.define matcher - RSpec Expectations - RSpec - Relish
https://www.relishapp.com/rspec/rspec-expectations/v/2-13/docs/custom-matchers/define-matcher
define matcher - RSpec Expectations - RSpec - Relish

==========================================================
47.[]class needed update for the 'expect' ; X.New way of defining custom rspec matchers / Code School / Discussion Area - Code School Support
http://help.codeschool.com/discussions/code-school/10904-new-way-of-defining-custom-rspec-matchers
New way of defining custom rspec matchers / Code School / Discussion Area - Code School Support
New way of defining custom rspec matchers
Iain Beeston's Avatar
Iain Beeston

Feb 24, 2013 @ 05:39 AM

In Testing with RSpec level 6, the way that is shown for defining custom matchers using a matcher class is (I think) the old way of doing things. RSpec now has a method named "RSpec::Matchers.define" that takes a block and provides a slightly more succinct way of defining matchers, and this is the way that the rspec documentation now recommends doing it. See here for details - https://www.relishapp.com/rspec/rspec-expectations/v/2-13/docs/cust...

Sorry if this isn't the best place for providing feedback on the courses!

    Support Staff 2 Posted by Adam Rensel on Mar 01, 2013 @ 11:46 AM
    Adam Rensel's Avatar

    Hi Iain,
    Don't worry, this is the perfect place to provide feedback. Thanks for letting us know, I'm going to add this to the rspec course repo so we can make updates to content. Thanks again.
==========================================================
58.[] ; X.How can I change the return value of a class constructor in Ruby? - Stack Overflow
http://stackoverflow.com/questions/4888786/how-can-i-change-the-return-value-of-a-class-constructor-in-ruby
How can I change the return value of a class constructor in Ruby? - Stack Overflow
 5 down vote accepted
	

def Foo.new(arg=nil)
  arg || super
end

 11 down vote
	

By definition, constructors are meant to return a newly created object of the class they are a member of, so, no you should not override this behavior.

Besides, in Ruby, new calls initialize somewhere within its method body, and its return value is ignored, so either way the value you return from initialize will not be returned from new.

With that said, I think that in your case, you might want to create a factory method that will return different Foo objects based on arguments passed to the factory method:

class Foo
  def self.factory(arg = nil)
    return arg if arg.kind_of? Foo
    Foo.new
  end
end
foo = Foo.factory
bar = Foo.factory(foo)

assert_equal foo, bar #passes

share|improve this answer
	
edited Feb 3 '11 at 17:08

	
answered Feb 3 '11 at 16:36
Jacob Relkin
81.3k14188215
	add comment
up vote 7 down vote
	

initialize is called by new which ignores its return value. Basically the default new method looks like this (except that it's implemented in C, not in ruby):

class Class
  def new(*args, &blk)
    o = allocate
    o.send(:initialize, *args, &blk)
    o
  end
end

So the newly allocated object is returned either way, no matter what you do in initialize. The only way to change that is overriding the new method, for example like this:

class Foo
  def self.new(arg=nil)
    if arg
      return arg
    else
      super
    end
  end
end

However I'd strongly advise against this since it runs counter to many expectations that people have when calling new:

    People expect new to return a new object. I mean it's even called new. If you want a method that does not always create a new object, you should probably call it something else.
    At the very least people expect Foo.new to return a Foo object. Your code will return whatever the argument is. I.e. Foo.new(42) would return 42, an Integer, not a Foo object. So if you're going to do this, you should at the very least only return the given object, if it is a Foo object.

share|improve this answer
	
edited Feb 3 '11 at 16:57
Jacob Relkin
81.3k14188215
	
answered Feb 3 '11 at 16:47
sepp2k
142k13323421
	add comment
up vote 1 down vote
	

Does not work for:


class Some
    def self.new( str )
        SomeMore.new( str )
    end
end



# the Some is parent of SomeMore class SomeMore < Some def initialize( str ) @str = str end end

share|improve this answer
	
edited Mar 30 '13 at 15:09

	
answered Nov 11 '12
==========================================================
59.[] ; X.ruby indicate a class's type - Google Search
https://www.google.com/search?q=ruby+indicate+a+class%27s+type&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a
ruby indicate a class's type - Google Search

==========================================================
60.[]result.class.name;  When I do this I get the Module names before it, so "Module::SubModule::Class", is there a way of getting just "Class" –  Abe @Abe: result.class.name.split('::').last; X.How do I get the name of a Ruby class? - Stack Overflow
http://stackoverflow.com/questions/826210/how-do-i-get-the-name-of-a-ruby-class
How do I get the name of a Ruby class? - Stack Overflow

==========================================================
61.[] ; X.ruby on rails - Why do I get an undefined method 'have' error when running Rspec? - Stack Overflow
http://stackoverflow.com/questions/20406625/why-do-i-get-an-undefined-method-have-error-when-running-rspec
ruby on rails - Why do I get an undefined method 'have' error when running Rspec? - Stack Overflow
 2 down vote accepted
	

The have family of matchers was deprecated in RSpec 2.99 and has been moved to a separate rspec-collection_matchers gem as of RSpec 3.0. This is discussed in http://myronmars.to/n/dev-blog/2013/11/rspec-2-99-and-3-0-betas-have-been-released, which also gives the suggested approach to migrating to 3.0. Specifically, it recommends installing/using RSpec 2.99 in order to see the deprecation messages associated with items that were removed/moved in 3.0.
 0 down vote
	

OK, got it.

I had the wrong version number in my Gemfile.

Before:

gem 'rspec-rails', '~> 3.0.0.beta'

After:

gem 'rspec-rails'


==========================================================
62.[]TODO BUG; 1.PRY said to be great per Danielle; 2. require 'ruby-debug' then use;  debugger; X.Running ruby debug in rspec? - Stack Overflow
http://stackoverflow.com/questions/5446594/running-ruby-debug-in-rspec
Running ruby debug in rspec? - Stack Overflow

==========================================================
66.[]CRLF issue ; X.Cygwin - cd in bash script - Super User
http://superuser.com/questions/189259/cygwin-cd-in-bash-script
Cygwin - cd in bash script - Super User
 10 down vote accepted
	

What kind of line endings does your script have? For Cygwin bash script to work properly (without having to set special options), it must have Unix line endings (LF) rather than DOS line endings (CR-LF). If you saved the script with DOS line endings, bash will see your argument to cd as /c/Code/Project^M, where ^M is a CR, and won't find a directory by that name.

To see which kind of line endings it has, you can execute file scriptname, where scriptname is the name of your script. To convert the script so that it has Unix line endings, execute d2u scriptname.

Don't use Notepad to edit Cygwin bash scripts. It always saves files with DOS line endings.
share|improve this answer
	
answered Sep 16 '10 at 15:22
garyjohn
13.9k21733
	
	 
	
Aha! That was it. I was using Vim to edit it. Thankyou :-) –  Dan Sep 16 '10 at 15:33
	 
	
Vim will work fine. It automatically detects whether files have Unix or DOS line endings and will save them the same way. By default, Cygwin's vim will create new files with Unix line endings, but Windows' gvim will create new file with DOS line endings. You can change that. See :help ff and :help ffs. –  garyjohn Sep 16 '10 at 18:46 
==========================================================
67.[]Use "\n" instead of '\n' ; X.ruby - How to do a newline in output - Stack Overflow
http://stackoverflow.com/questions/2060253/how-to-do-a-newline-in-output
ruby - How to do a newline in output - Stack Overflow

==========================================================
68.[] ; X.raise_error matcher - Built in matchers - RSpec Expectations - RSpec - Relish
https://www.relishapp.com/rspec/rspec-expectations/v/2-6/docs/built-in-matchers/raise-error-matcher
raise_error matcher - Built in matchers - RSpec Expectations - RSpec - Relish
 expect specific error message using a regular expression

    Given
        a file named "expect_error_with_regex.rb" with:

        describe "matching error message with regex" do
          it "matches the error message" do
            expect { raise StandardError, "my message" }.
              to raise_error(StandardError, /my mess/)
          end
        end


==========================================================
69.[] ; X.How do I search within an array of hashes by hash values in ruby? - Stack Overflow
http://stackoverflow.com/questions/2244915/how-do-i-search-within-an-array-of-hashes-by-hash-values-in-ruby
How do I search within an array of hashes by hash values in ruby? - Stack Overflow


You're looking for Enumerable#select (also called find_all):

@fathers.select {|father| father["age"] > 35 }
# => [ { "age" => 40, "father" => "Bob" },
#      { "age" => 50, "father" => "Batman" } ]

Per the documentation, it "returns an array containing all elements of [the enumerable, in this case @fathers] for which block is not false."

==========================================================
70.[]LIST many cmds ; X.Module: Enumerable (Ruby 2.1.0)
http://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-select
Module: Enumerable (Ruby 2.1.0)
(1..4).map { |i| i*i }      #=> [1, 4, 9, 16]
(1..4).collect { "cat"  }   #=> ["cat", "cat", "cat", "cat"]
==========================================================
71.[] ; X.Sorting Ruby Arrays - failed with TypeError: can't convert Symbol into Integer - Stack Overflow
http://stackoverflow.com/questions/5684805/sorting-ruby-arrays-failed-with-typeerror-cant-convert-symbol-into-integer
Sorting Ruby Arrays - failed with TypeError: can't convert Symbol into Integer - Stack Overflow
 accepted
	

Your input is actually a pair (name, [book]), so make sure you only sort the second element of the pair (the books array):

[source_array[0], source_array[1].sort_by { |book| book[:price].to_i }]


==========================================================
72.[] ; X.Command line - RSpec Core - RSpec - Relish
https://relishapp.com/rspec/rspec-core/docs/command-line
Command line - RSpec Core - RSpec - Relish
Command line

The rspec command comes with several options you can use to customize RSpec's
behavior, including output formats, filtering examples, etc.

For a full list of options, run the rspec command with the --help flag:

$ rspec --help

Run with ruby

Generally, life is simpler if you just use the rspec command. If you must use the ruby
command, however, you'll need to require "rspec/autorun". You can
either pass a -rrspec/autorun CLI option when invoking ruby, or add
a require 'rspec/autorun' to one or more of your spec files.

It is conventional to put configuration in and require assorted support files
from spec/spec_helper.rb. It is also conventional to require that file from
the spec files using require 'spec_helper'. This works because RSpec
implicitly adds the spec directory to the LOAD_PATH. It also adds lib, so
your implementation files will be on the LOAD_PATH as well.

If you're using the ruby command, you'll need to do this yourself
(with the -I option). Putting these together, your command might be
something like this:

$ ruby -Ilib -Ispec -rrspec/autorun path/to/spec.rb

Topics

    --example option
    --format option
    --line_number option
    --tag option
    line number appended to file path
    exit status
    rake task
    --dry-run
    --fail-fast
    --init option
    --order (new in rspec-core-2.8)
    --require option
    pattern option
    Randomization can be reproduced across test runs
    run with ruby command
    run with warnings enabled

Last published about 1 month ago by myronmarston.

===========================================================
.[]
===========================================================
.[]
===========================================================
.[]Rspec-tip; When an RB "won't compile", Rspec Refuses to Include it!!!   = BUG DOC`require': cannot load such file -- ./lib/store (LoadError);  Store runner bugged. ; upon re-deleting the default path, got; 
C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin\ruby.exe -e $stdout.sync=true;$stderr.sync=true;load($0=ARGV.shift) C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin/rspec C:/amsrc/rmtry/spec/lib/store_spec.rb --require teamcity/spec/runner/formatter/teamcity/formatter --format Spec::Runner::Formatter::TeamcityFormatter
Testing started at 3:58 PM ...
C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- ./lib/store (LoadError)
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from C:/amsrc/rmtry/spec/lib/store_spec.rb:2:in `<top (required)>'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `load'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `block in load_spec_files'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `each'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `load_spec_files'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/command_line.rb:22:in `run'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/runner.rb:90:in `run'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/runner.rb:17:in `block in autorun'

Process finished with exit code 1
Empty test suite.

===========================================================
.[]BUG DOC Store runner bugged.
.[]rspec-tip; do not add the filepath default, nor the documentation format so can better see in rubymine; 150115w4p. //? seemed like again had to add in rubymine runner options, default-path 'C:\Users\amoroney\amPrjs\rmtry\'

the weird thing was that the store was not working?? 

C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin\ruby.exe -e $stdout.sync=true;$stderr.sync=true;load($0=ARGV.shift) C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin/rspec C:/amsrc/rmtry/spec/lib/store_spec.rb --require teamcity/spec/runner/formatter/teamcity/formatter --format Spec::Runner::Formatter::TeamcityFormatter default-path 'C:\Users\amoroney\amPrjs\rmtry\'
Testing started at 3:57 PM ...

C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `load': cannot load such file -- C:/Users/amoroney/amPrjs/rmtry (LoadError)
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `block in load_spec_files'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `each'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `load_spec_files'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/command_line.rb:22:in `run'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/runner.rb:90:in `run'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/runner.rb:17:in `block in autorun'

Process finished with exit code 1
Empty test suite.

===========================================================
.[]BUG DOC; no tests found ; due to mybug, not finished coding. 

MY SRC
C:\amsrc\rmtry\spec\lib\terminal_spec.rb
require 'rspec' # core, expectations, mocks, support
require './lib/terminal'
require './lib/store'
require './lib/cart'
require './spec/lib/custom_stdout_matcher'

describe 'Terminal/Shopping/' do
...


SRC of api; 
C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\lib\ruby\site_ruby\1.9.1\rubygems\custom_require.rb

ref'd by ; 
C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin\ruby.exe -e $stdout.sync=true;$stderr.sync=true;load($0=ARGV.shift) C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin/rspec C:/amsrc/rmtry/spec/lib/terminal_spec.rb --require teamcity/spec/runner/formatter/teamcity/formatter --format Spec::Runner::Formatter::TeamcityFormatter
Testing started at 3:31 PM ...
C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': C:/amsrc/rmtry/lib/terminal.rb:21: syntax error, unexpected $end, expecting keyword_end (SyntaxError)
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from C:/amsrc/rmtry/spec/lib/terminal_spec.rb:2:in `<top (required)>'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `load'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `block in load_spec_files'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `each'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/configuration.rb:886:in `load_spec_files'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/command_line.rb:22:in `run'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/runner.rb:90:in `run'
	from C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/rspec-core-3.0.0.beta1/lib/rspec/core/runner.rb:17:in `block in autorun'

Process finished with exit code 1
Empty test suite.


===========================================================
.[]GREEN, READY FOR GUI
===========================================================
.[]cs ruby call rspc cmd also ok on win; 

C:\amsrc\rmtry>
C:\amsrc\rmtry>
C:\amsrc\rmtry>
C:\amsrc\rmtry>
C:\amsrc\rmtry>
C:\amsrc\rmtry>C:\Users\amoroney\amApps\lang\ruby\RailsInstaller\Ruby1.9.3\bin
/rspec  --format doc

Cart
  Context: There is a Store associated with this Cart to check products.
    #add Raises error if add a new item without any arguments, ie no Id.
    #count is 1 for one element.
    #count is 2 for two elements.
    #clear Resets a populated cart back to empty.
    #report Describes contents of one item as a string.
    #report Describes its contents of two items as a string.
    #report Describes an empty cart as having no elements.

Store
  #ConvertDollarsToPennies Rounds up.
  #Find_Product Returns true upon searching a product that is in the store.
  #Find_Product Returns false upon searching a product that is not in the store.
  #Find_Product Returns false upon searching for an invalid product.
  #Add_Product Raises error if duplicate product is entered.
  #Add_Product Raises error if discount quantity but not price is entered.
  #Add_Product Raises error if add a new item without any arguments, ie no Id.
  #Add_Product Raises error if add a new item without both Id and Price.
  #count is 1 for one element.
  #count is 2 for two elements.
  #clear Resets a populated store back to empty.
  #report Describes its contents as a string.
  #report Describes an empty store as having no elements.
  #Price_in_pennies: Raises error if price-check an empty store.
  #Price_in_pennies: Raises error if price-check an item not in the store.
  #Price_in_pennies: Returns the price in pennies for quantity of one.
  #Price_in_pennies: Returns the non-discounted price in pennies when there is no discount volume quantity.
  #Price_in_pennies: Returns the discounted total price in pennies for purchase size exactly equal to the discount volume quantity.
  #Price_in_pennies: Returns the minimally discounted total price in pennies for purchase size larger than the discount volume quantity.
  FUTURE Possible Refactorings.
    Products Map Uses symbols instead of strings as hash keys. (PENDING: cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby)

Terminal/Shopping/
  Says Hello to the (Admin) user upon instantiation.
  Does Not accept a redefined $stdin nor $stdout.
  TBA
    asks for product pricelist. (PENDING: Not yet implemented)
    allows entry of product-id, price (PENDING: Not yet implemented)
    allows entry of product-id, price, qualifying quantity, and discounted price (PENDING: Not yet implemented)
    verifies item added to a cart is in the store. (PENDING: (first dependency))

Pending:
  Store FUTURE Possible Refactorings. Products Map Uses symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:110
  Terminal/Shopping/ TBA asks for product pricelist.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:20
  Terminal/Shopping/ TBA allows entry of product-id, price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:22
  Terminal/Shopping/ TBA allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:24
  Terminal/Shopping/ TBA verifies item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:26

Finished in 0.20314 seconds
33 examples, 0 failures, 5 pending
===========================================================
.[]plain is also ok with regular simple rspc cmd on win; 

C:\amsrc\rmtry>rspec
..........................*..****

Pending:
  Store FUTURE Possible Refactorings. Products Map Uses symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:110
  Terminal/Shopping/ TBA asks for product pricelist.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:20
  Terminal/Shopping/ TBA allows entry of product-id, price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:22
  Terminal/Shopping/ TBA allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:24
  Terminal/Shopping/ TBA verifies item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:26

Finished in 0.06251 seconds
33 examples, 0 failures, 5 pending

C:\amsrc\rmtry>
===========================================================
.[]fro mrubymine; BUG, can only do the std way, so this does not show doc right now.

Testing started at 12:12 PM ...

Pending: Temporarily disabled with xit

Pending: Not implementing this to make an example.

Pending: Language deficit, until: Be able to pass Block to a Regex, not just an Object, eg ; expect{"aaabbb"}.to match(/ab/)

Pending: Read up on the actual code to sort this out.

Pending: On windows, chk commandline and/or path and/or the raw code.
0{:id=>"a", :price=>100, :numberForBatchDiscount=>0, :batchPrice=>0}
Pending: refactor this prior code to make nice examples
C:/amsrc/rmtry/specLibD, [2014-01-15T12:12:58.319579 #4752] DEBUG -- : initialize=  //Logging Test.

Pending: Not yet implemented

Pending: Not yet implemented

27 examples, 0 failures, 19 passed, 8 pending

Finished in 0.130727 seconds

Process finished with exit code 0

===========================================================
.[]SKIPPED SOME
===========================================================
.[]
====================================================
.[]"Grn. Ready to add front end, ie admin enter products."
2014-01-09Thu.21:33:34

Annes-MacBook-Pro:rmtry amoroney$ pwd
/Users/amoroney/src/rmtry
Annes-MacBook-Pro:rmtry amoroney$ rspec --format documentation

Cart
  #Using the Store, Buy items - Features:
    #add Raises error if add a new item without any arguments, ie no Id.
    #Add Raises an error if add a product that is not in the store. (PENDING: Not yet implemented)
    #count is 1 for one element.
    #count is 2 for two elements.
    #clear Resets a populated cart back to empty.
    #report Describes contents of one item as a string.
    #report Describes its contents of two items as a string.
    #report Describes an empty cart as having no elements.

Store
  #Find_Product Returns true upon searching a product that is in the store.
  #Find_Product Returns false upon searching a product that is not in the store.
  #Find_Product Returns false upon searching for an invalid product.
  #Add_Product Raises error if discount quantity but not price is entered.
  #ConvertDollarsToPennies Rounds up.
  #Non-Discounted Item - Features:
    #Add_Product Raises error if add a new item without any arguments, ie no Id.
    #Add_Product Raises error if add a new item without both Id and Price.
    #count is 1 for one element.
    #count is 2 for two elements.
    #clear Resets a populated store back to empty.
    #report Describes its contents as a string.
    #report Describes an empty store as having no elements.
  FUTURE possible work.
    Products Map Uses symbols instead of strings as hash keys. (PENDING: cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby)

Terminal/Shopping/
  Says Hello to the (Admin) user upon instantiation.
  Does Not accept a redefined $stdin nor $stdout.
  TBA
    asks for product pricelist. (PENDING: Not yet implemented)
    allows entry of product-id, price (PENDING: Not yet implemented)
    allows entry of product-id, price, qualifying quantity, and discounted price (PENDING: Not yet implemented)
    verifies item added to a cart is in the store. (PENDING: (first dependency))

Pending:
  Cart #Using the Store, Buy items - Features: #Add Raises an error if add a product that is not in the store.
    # Not yet implemented
    # ./spec/lib/cart_spec.rb:14
  Store FUTURE possible work. Products Map Uses symbols instead of strings as hash keys.
    # cf Ruby Design rules; https:\/\/github.com\/styleguide\/ruby
    # ./spec/lib/store_spec.rb:77
  Terminal/Shopping/ TBA asks for product pricelist.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:26
  Terminal/Shopping/ TBA allows entry of product-id, price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:28
  Terminal/Shopping/ TBA allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:30
  Terminal/Shopping/ TBA verifies item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:32

Finished in 0.01096 seconds
27 examples, 0 failures, 6 pending
Annes-MacBook-Pro:rmtry amoroney$

====================================================
.[]Git's output telling about line end changes; 2014-01-09Thu.15:12:14

$ git commit -m "Grn. Validation mostly done.  MVC reorg and renamed many things."
/opt/boxen/homebrew/bin/hub:2060: warning: Insecure world writable dir /Users/amoroney/src/rmtry in PATH, mode 040777
warning: CRLF will be replaced by LF in .idea/runConfigurations/Run_spec__cart_spec___rmtry.xml.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in .idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml.
The file will have its original line endings in your working directory.
[master f990482] Grn. Validation mostly done.  MVC reorg and renamed many things.
warning: CRLF will be replaced by LF in .idea/runConfigurations/Run_spec__cart_spec___rmtry.xml.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in .idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml.
The file will have its original line endings in your working directory.
 20 files changed, 707 insertions(+), 512 deletions(-)
 create mode 100644 .idea/runConfigurations/Run_spec__cart_spec___rmtry.xml
 create mode 100644 .idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml
 rewrite lib/store.rb (60%)
 rewrite spec/lib/store_spec.rb (63%)
Annes-MacBook-Pro:rmtry amoroney$

====================================================
.[]Mac line endings; I thought maybe rubymine would help? No, not so, I never committed before, so yet to see.

$ git add -A
/opt/boxen/homebrew/bin/hub:2060: warning: Insecure world writable dir /Users/amoroney/src/rmtry in PATH, mode 040777
warning: CRLF will be replaced by LF in .idea/runConfigurations/Run_spec__cart_spec___rmtry.xml.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in .idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml.
The file will have its original line endings in your working directory.
Annes-MacBook-Pro:rmtry amoroney$ pwd
/Users/amoroney/src/rmtry

====================================================
.[]Now on the mac. 2014-01-09Thu.15:09:33@ green.

Annes-MacBook-Pro:zPrjsRubyMine amoroney$ cd /Users/amoroney/src/rmtry/
Annes-MacBook-Pro:rmtry amoroney$ pwd
/Users/amoroney/src/rmtry
Annes-MacBook-Pro:rmtry amoroney$ ls
doc	lib	spec	specFut
Annes-MacBook-Pro:rmtry amoroney$ git status/opt/boxen/homebrew/bin/hub:2060: warning: Insecure world writable dir /Users/amoroney/src/rmtry in PATH, mode 040777
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   .idea/codeStyleSettings.xml
#	modified:   .idea/misc.xml
#	modified:   .idea/rmtry.iml
#	modified:   .idea/runConfigurations/Run_spec__zRspec_spec___rmtry.xml
#	modified:   .idea/runConfigurations/Run_spec__zRuby_spec___rmtry.xml
#	modified:   .idea/runConfigurations/allRspec1.xml
#	modified:   .idea/vcs.xml
#	modified:   .idea/workspace.xml
#	modified:   lib/cart.rb
#	modified:   lib/store.rb
#	modified:   lib/terminal.rb
#	modified:   spec/lib/cart_spec.rb
#	modified:   spec/lib/store_spec.rb
#	modified:   spec/lib/terminal_spec.rb
#	modified:   specFut/db.rb
#	modified:   specFut/db_spec.rb
#	modified:   specFut/zRuby_spec.rb
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	.idea/runConfigurations/Run_spec__cart_spec___rmtry.xml
#	.idea/runConfigurations/Run_spec__terminal_spec___rmtry.xml
no changes added to commit (use "git add" and/or "git commit -a")
Annes-MacBook-Pro:rmtry amoroney$
Annes-MacBook-Pro:rmtry amoroney$
Annes-MacBook-Pro:rmtry amoroney$
Annes-MacBook-Pro:rmtry amoroney$ rspec --format documentation

Cart
  #Using the Store, Buy items - Features:
    #add Raises error if add a new item without any arguments, ie no Id.
    #count is 1 for one element.
    #count is 2 for two elements.
    #clear Resets a populated cart back to empty.
    #report Describes contents of one item as a string.
    #report Describes its contents of two items as a string.
    #report Describes an empty cart as having no elements.

Store
  #Add_Product Raises error if discount quantity but not price is entered.
  #ConvertDollarsToPennies Rounds up.
  #Non-Discounted Item - Features:
    #Add_Product Raises error if add a new item without any arguments, ie no Id.
    #Add_to_Cart Raises error if add a product that is not in the store. (PENDING: Not yet implemented)
    #Add_Product Raises error if add a new item without both Id and Price.
    #count is 1 for one element.
    #count is 2 for two elements.
    #clear Resets a populated store back to empty.
    #report Describes its contents as a string.
    #report Describes an empty store as having no elements.

Terminal/Shopping/
  Says Hello to the (Admin) user upon instantiation.
  Does Not accept a redefined $stdin nor $stdout.
  TBA
    asks for product pricelist. (PENDING: Not yet implemented)
    allows entry of product-id, price (PENDING: Not yet implemented)
    allows entry of product-id, price, qualifying quantity, and discounted price (PENDING: Not yet implemented)
    verifies item added to a cart is in the store. (PENDING: (first dependency))

Pending:
  Store #Non-Discounted Item - Features: #Add_to_Cart Raises error if add a product that is not in the store.
    # Not yet implemented
    # ./spec/lib/store_spec.rb:29
  Terminal/Shopping/ TBA asks for product pricelist.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:26
  Terminal/Shopping/ TBA allows entry of product-id, price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:28
  Terminal/Shopping/ TBA allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:30
  Terminal/Shopping/ TBA verifies item added to a cart is in the store.
    # (first dependency)
    # ./spec/lib/terminal_spec.rb:32

Finished in 0.00916 seconds
23 examples, 0 failures, 5 pending
Annes-MacBook-Pro:rmtry amoroney$
Annes-MacBook-Pro:rmtry amoroney$
==================================
1-8w 9.50p 
1.
RED. 1.BUG the if/else tests on store validation are not correct. ; 2.Now have the 3 proper MVC classes: Terminal/GUI, Store/Controller/Model1, Cart/Model2.

======================================
1-8w 7.23p; 

1.
basic CRUD minus Delete on non-special element.

amoroney@surf256pro /cygdrive/c/amsrc/rmtry
$ rspec.bat --format documentation

Cart/
  #add Raises error if add a new item without both Id and Price.
  #count is 1 for one element.
  #count is 2 for two elements.
  #report Describes its contents as a string.
  #clear Resets a populated cart back to empty.
  #report Describes an empty cart as having no elements.

Finished in 0.03125 seconds
6 examples, 0 failures

2.
reorg so that all my self-doc tests are in specFUT, thus not making overly long listings.

3.
this fixes the hash and rspec-matches issues.
==================================
.[]RubyMine-Tip; Use osx10.5+ keymap to get ctrl-a/e line start/end.

$ git log
commit a2f6b6fac749102c1367fb8e50766625f9f7dc92
Author: Anne Moroney <annemoroney@alum.mit.edu>
Date:   Sun Jan 5 01:58:56 2014 +0000

    Grn. New zRuby_specs to hold documentation/learning. Deleted cruft from 'real' files. NEXT; Pending list of Rspecs for Api is begun, not yet simple enough.

commit d314a26db7eb3785bb11e7f6a3aa9ce2bbc5af67
Author: Anne Moroney <annemoroney@alum.mit.edu>
Date:   Thu Jan 2 15:24:59 2014 -0500

    rspec small trials, green/tba. frm earlier. rmtry\terminal aka gifts. w8.

amoroney@surf256pro ~/amPrjs/rmtry
$ /cygdrive/c/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/rspec.bat
.****..D, [2014-01-05T01:59:32.334684 #2744] DEBUG -- : initialize=  //Logging Test.
.*..*.**..

Pending:
  Gifts/ Can to_s.
    # !!Add crud test
    # ./spec/lib/gifts_spec.rb:11
  Terminal/Shopping/ #Startup-initialization asks for product pricelist.
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:8
  Terminal/Shopping/ #Startup-initialization allows entry of product-id, price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:10
  Terminal/Shopping/ #Startup-initialization allows entry of product-id, price, qualifying quantity, and discounted price
    # Not yet implemented
    # ./spec/lib/terminal_spec.rb:12
  zRuby/Logging-Tips/ Is testable by capturing sysout.
    # IDK how to use the let(:outs) statement.
    # ./spec/lib/zRuby_spec.rb:31
  zRuby/Error-Handling-Tips/ Throws NotImplementedError when...??
    # Not yet implemented
    # ./spec/lib/zRuby_spec.rb:48
  zRuby/Rspec-Tips Will not run any "it" test that is changed to "xit".
    # Temporarily disabled with xit
    # ./spec/lib/zRuby_spec.rb:56
  zRuby/Rspec-Tips Will not run and will explain the cause for delay with the the given pending clause's text.
    # Not implementing this to make an example.
    # ./spec/lib/zRuby_spec.rb:58

Finished in 0.01563 seconds
17 examples, 0 failures, 8 pending

amoroney@surf256pro ~/amPrjs/rmtry
$
===============================================
.[]fyi, win rspec inside rails in cli


amoroney@surf256pro ~/amPrjs/rmtry
$ which rspec
/cygdrive/c/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/rspec

amoroney@surf256pro ~/amPrjs/rmtry
$ cat /cygdrive/c/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/rspec
#!C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/ruby.exe
#
# This file was generated by RubyGems.
#
# The application 'rspec-core' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

version = ">= 0"

if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
  if str =~ /\A_(.*)_\z/
    version = $1
    ARGV.shift
  end
end

gem 'rspec-core', version
load Gem.bin_path('rspec-core', 'rspec', version)

amoroney@surf256pro ~/amPrjs/rmtry
$

amoroney@surf256pro ~/amPrjs/rmtry
$ cat /cygdrive/c/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/rspec.bat
@ECHO OFF
IF NOT "%~f0" == "~f0" GOTO :WinNT
@"ruby.exe" "C:/Users/amoroney/amApps/lang/ruby/RailsInstaller/Ruby1.9.3/bin/rspec" %1 %2 %3 %4 %5 %6 %7 %8 %9
GOTO :EOF
:WinNT
@"ruby.exe" "%~dpn0" %*

amoroney@surf256pro ~/amPrjs/rmtry
$

============================================
.[]todo run rspec partially in cygwin, as opposed to; 
$ rspec.bat   --format doc
which works but of course runs all of them. 
